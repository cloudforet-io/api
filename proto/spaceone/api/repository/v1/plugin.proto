// A Plugin is a resource containing data of deployable plugins such as container image and registry URL.
syntax = "proto3";

package spaceone.api.repository.v1;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/repository/v1";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";
import "spaceone/api/repository/v1/repository.proto";


service Plugin {
  // Registers a Plugin. The parameter `registry_type`, meaning container registry type, can be either `DOCKER_HUB` or `AWS_PRIVATE_ECR`. The default value of the `registry_type` is `DOCKER_HUB`. The parameter `registry_url` is required if the `registry_type` is not `DOCKER_HUB`. The parameter `image` is limited to 40 characters.
  rpc register (RegisterPluginRequest) returns (PluginInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/register"
      body: "*"
    };
  }

  // Updates a specific Plugin registered. A Plugin can be updated only if its Repository's `repository_type` is `local`. You can make changes in Plugin settings, including `template` and its options, `schema`.
  rpc update (UpdatePluginRequest) returns (PluginInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/update"
      body: "*"
    };
  }

  // Deregisters and deletes a specific Plugin. You must specify the `plugin_id` of the Plugin to deregister.
  rpc deregister (PluginRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/deregister"
      body: "*"
    };
  }

  // Enables a specific Plugin. If the Plugin is enabled, the Plugin can be used as its parameter `state` becomes `ENABLED`.
  rpc enable (PluginRequest) returns (PluginInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/enable"
      body: "*"
    };
  }

  // Disables a specific Plugin. If the Plugin is disabled, the Plugin cannot be used as its parameter `state` becomes `DISABLED`.
  rpc disable (PluginRequest) returns (PluginInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/disable"
      body: "*"
    };
  }

  // Gets all version data of a specific Plugin from its Repository. The parameter `plugin_id` is used as an identifier of a Plugin to get version data.
  rpc get_versions (RepositoryPluginRequest) returns (VersionsInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/get-versions"
      body: "*"
    };
  }

  // Gets a specific Plugin. Prints detailed information about the Plugin, including  `image`, `registry_url`, and `state`.
  rpc get (RepositoryPluginRequest) returns (PluginInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/get"
      body: "*"
    };
  }

  // Gets a list of all Plugins registered in a specific Repository. The parameter `repository_id` is used as an identifier of a Repository to get its list of Plugins. You can use a query to get a filtered list of Plugins.
  rpc list (PluginQuery) returns (PluginsInfo) {
    option (google.api.http) = {
      post: "/repository/v1/plugin/list"
      body: "*"
    };
  }
}

enum PublicRegistryType {
  NONE_REGISTRY_TYPE = 0;
  DOCKER_HUB = 1;
  AWS_PRIVATE_ECR = 2;
  HARBOR = 3;
  GITHUB = 4;
  GCP_PRIVATE_GCR = 5;
}

//{
//    "name": "JIRA Software Collector",
//    "service_type": "inventory.Collector",
//    "image": "cloudforet/plugin-jira-noti-protocol",
//    "registry_type": "DOCKER_HUB",
//    "registry_config": {},
//    "provider": "jira",
//    "capability": {
//        "supported_schema": [
//            "jira-software-secret-api-token"
//        ]
//    },
//    "labels": [
//        "jira",
//        "atlassian",
//        "notification"
//    ],
//    "tags": {
//        "description": "Atlassian JIRA Issue notification",
//        "icon": "https://icon-path/jira-icon.png"
//    }
//}
message RegisterPluginRequest {
  string name = 1;
  string resource_type = 2;
  string image = 3;
  // +optional
  string provider = 4;
  // +optional
  PublicRegistryType registry_type = 5;
  // +optional
  google.protobuf.Struct registry_config = 6;
  // +optional
  google.protobuf.Struct capability = 7;
  // +optional
  google.protobuf.ListValue labels = 8;
  // +optional
  google.protobuf.Struct tags = 9;
  // if plugin_id is not provided, it will be generated by image name
  // +optional
  string plugin_id = 10;
  // +optional
  // {"en": {}, "ko": {}, "ja":{}}
  google.protobuf.Struct docs = 11;
}

//{
//    "name": "JIRA Software Collector",
//    "capability": {
//        "supported_schema": [
//            "jira-software-secret-api-token"
//        ]
//    },
//    "labels": [
//        "jira",
//        "atlassian",
//        "notification"
//    ],
//    "tags": {
//        "description": "Atlassian JIRA Issue notification",
//        "icon": "https://icon-path/jira-icon.png"
//    }
//}
message UpdatePluginRequest {
  string plugin_id = 1;
  // +optional
  string name = 2;
  // +optional
  google.protobuf.Struct capability = 3;
  // +optional
  google.protobuf.ListValue labels = 4;
  // +optional
  google.protobuf.Struct tags = 5;
  // +optional
  google.protobuf.Struct docs = 6;
}

//{
//    "plugin_id": "plugin-aws-sns-mon-webhook",
//}
message PluginRequest {
  string plugin_id = 1;
}

//{
//    "plugin_id": "plugin-aws-sns-mon-webhook",
//}
message RepositoryPluginRequest {
  string plugin_id = 1;
  // +optional
  string repository_id = 21;
}

//{
//    "query": {},
//    "repository_id": "repo-123456789012"
//}
message PluginQuery {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
  }

  // +optional
  spaceone.api.core.v2.Query query = 1;
  // +optional
  string plugin_id = 2;
  // +optional
  string name = 3;
  // +optional
  State state = 4;
  // +optional
  string resource_type = 5;
  // +optional
  string provider = 6;
  // +optional
  PublicRegistryType registry_type = 7;
  // +optional
  string repository_id = 21;

}

//{
//    "plugin_id": "plugin-jira-noti-protocol",
//    "name": "JIRA Issue notification",
//    "image": "pyengine/plugin-jira-noti-protocol",
//    "registry_url": "registry.hub.docker.com",
//    "state": "ENABLED",
//    "service_type": "notification.Procotol",
//    "provider": "atlassian",
//    "registry_type": "DOCKER_HUB",
//    "registry_config": {},
//    "capability": {
//        "supported_schema": [
//            "atlassian_jira"
//        ]
//    },
//    "template": {
//        "options": {
//            "schema": {
//                "type": "object",
//                "required": [],
//                "properties": {
//                    "project_id": {
//                        "type": "string",
//                        "title": "Project ID",
//                        "minLength": 4.0
//                    },
//                    "sa_name": {
//                        "title": "Service Account",
//                        "type": "string",
//                        "minLength": 4.0
//                    }
//                }
//            }
//        }
//    },
//    "labels": [
//        "jira",
//        "atlassian",
//        "notification"
//    ],
//    "tags": {
//        "description": "Atlassian JIRA Issue notification",
//        "icon": "https://icon-path/jira-icon.png"
//    },
//    "repository_info": {
//        "repository_id": "repo-123456789012",
//        "name": "Marketplace",
//        "repository_type": "remote"
//    },
//    "domain_id": "domain-123456789012",
//    "created_at": "2022-01-01T08:02:38.094Z",
//    "updated_at": "2022-01-01T08:02:38.094Z"
//}
message PluginInfo {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
  }

  string plugin_id = 1;
  string name = 2;
  State  state = 3;
  string resource_type = 4;
  string image = 5;
  string provider = 6;
  PublicRegistryType registry_type = 7;
  string registry_url = 8;
  google.protobuf.Struct registry_config = 9;
  google.protobuf.Struct capability = 10;
  google.protobuf.ListValue labels = 11;
  google.protobuf.Struct tags = 12;
  google.protobuf.Struct docs = 13;

  string domain_id = 21;
  RepositoryInfo repository_info = 22;

  string created_at = 31;
  string updated_at = 32;
}

//{
//    "results": [
//        {
//            "plugin_id": "plugin-api-direct-mon-webhook",
//            "name": "API Direct Webhook",
//            "image": "pyengine/plugin-api-direct-mon-webhook",
//            "registry_url": "registry.hub.docker.com",
//            "state": "ENABLED",
//            "service_type": "monitoring.Webhook",
//            "registry_type": "DOCKER_HUB",
//            "registry_config": {},
//            "capability": {},
//            "template": {},
//            "labels": [],
//            "tags": {
//                "icon": "https://icon-url/icon.svg"
//            },
//            "repository_info": {
//                "repository_id": "repo-123456789012",
//                "name": "Marketplace",
//                "repository_type": "remote"
//            },
//            "domain_id": "domain-987654321098",
//            "created_at": "2022-01-01T03:25:10.408Z",
//            "updated_at": "2022-01-01T03:25:10.408Z"
//        },
//        {
//            "plugin_id": "plugin-aws-hyperbilling-cost-datasource",
//            "name": "AWS HyperBilling Cost Analysis Data Source",
//            "image": "pyengine/plugin-aws-hyperbilling-cost-datasource",
//            "registry_url": "registry.hub.docker.com",
//            "state": "ENABLED",
//            "service_type": "cost_analysis.DataSoruce",
//            "registry_type": "DOCKER_HUB",
//            "registry_config": {},
//            "capability": {},
//            "template": {},
//            "labels": [],
//            "tags": {},
//            "repository_info": {
//                "repository_id": "repo-123456789012",
//                "name": "Marketplace",
//                "repository_type": "remote"
//            },
//            "domain_id": "domain-987654321098",
//            "created_at": "2022-01-01T04:56:55.082Z",
//            "updated_at": "2022-01-01T04:56:55.082Z"
//        }
//    ],
//    "total_count": 2
//}
message PluginsInfo {
  repeated PluginInfo results = 1;
  int32 total_count = 2;
}

//{
//    "total_count": 1,
//    "results": [
//        "1.2.2",
//        "1.2.1.20220429.104002",
//        "1.2.1.20220422.161421",
//        "1.2.1.20220411.113807",
//        "1.2.1"
//    ]
//}
message VersionsInfo {
  // deprecated field
  repeated string version = 1;
  int32 total_count = 2;
  repeated string results = 3;
}
