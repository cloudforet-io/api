syntax = "proto3";

package spaceone.api.repository.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/repository/v1/repository.proto";


service Plugin {
    rpc register (CreatePluginRequest) returns (PluginInfo) {
        option (google.api.http) = { post: "/repository/v1/plugins" };
    }
    rpc update (UpdatePluginRequest) returns (PluginInfo) {
        option (google.api.http) = { put: "/repository/v1/plugin/{plugin_id}" };
    }
    rpc deregister (PluginRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/repository/v1/plugin/{plugin_id}" };
    }
    rpc enable (PluginRequest) returns (PluginInfo) {
        option (google.api.http) = { put: "/repository/v1/plugin/{plugin_id}/enable" };
    }
    rpc disable (PluginRequest) returns (PluginInfo) {
        option (google.api.http) = { put: "/repository/v1/plugin/{plugin_id}/disable" };
    }
    rpc get_versions (RepositoryPluginRequest) returns (VersionsInfo) {
        option (google.api.http) = { get: "/repository/v1/plugins/{plugin_id}/versions" };
    }
    rpc get (GetRepositoryPluginRequest) returns (PluginInfo) {
        option (google.api.http) = { get: "/repository/v1/plugins/{plugin_id}" };
    }
    rpc list (PluginQuery) returns (PluginsInfo) {
        option (google.api.http) = {
            get: "/repository/v1/plugins"
            additional_bindings {
                post: "/repository/v1/plugins/search"
            }
        };
    }
    rpc stat (PluginStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/repository/v1/plugins/stat" };
    }
}

enum PublicRegistryType {
    NONE_REGISTRY_TYPE = 0;
    DOCKER_HUB = 1;
    AWS_PUBLIC_ECR = 2;
}

message CreatePluginRequest {
    // is_required: true
    string name = 1;
    // is_required: true
    string service_type = 2;
    // is_required: true
    string image = 3;
    // is_required: false
    string provider = 4;
    // is_required: false
    PublicRegistryType registry_type = 5;
    // is_required: false
    google.protobuf.Struct registry_config = 6;
    // is_required: false
    google.protobuf.Struct capability = 11;
    // is_required: false
    google.protobuf.Struct template = 12;
    // is_required: false
    google.protobuf.ListValue labels = 13;
    // is_required: false
    google.protobuf.Struct tags = 14;
    // is_required: false
    string project_id = 21;
    // is_required: true
    string domain_id = 22;
}

message UpdatePluginRequest {
    // is_required: true
    string plugin_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    google.protobuf.Struct capability = 11;
    // is_required: false
    google.protobuf.Struct template = 12;
    // is_required: false
    google.protobuf.ListValue labels = 13;
    // is_required: false
    google.protobuf.Struct tags = 14;
    // is_required: true
    string domain_id = 21;
}

message PluginRequest {
    // is_required: true
    string plugin_id = 1;
    // is_required: true
    string domain_id = 2;
}

message RepositoryPluginRequest {
    // is_required: true
    string plugin_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    string repository_id = 3;
}

message GetRepositoryPluginRequest {
    // is_required: true
    string plugin_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    string repository_id = 3;
    // is_required: false
    repeated string only = 4;
}

message PluginQuery {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string plugin_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    State state = 4;
    // is_required: false
    string service_type = 5;
    // is_required: false
    string provider = 6;
    // is_required: true
    string repository_id = 7;
    // is_required: true
    string domain_id = 8;
    // is_required: false
    PublicRegistryType registry_type = 9;

}

message PluginInfo {
    enum State {
        NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    string plugin_id = 1;
    string name = 2;
    string image = 3;
    string registry_url = 4;
    State  state = 5;
    string service_type = 6;
    string provider = 7;
    PublicRegistryType registry_type = 8;
    google.protobuf.Struct registry_config = 9;

    google.protobuf.Struct capability = 11;
    google.protobuf.Struct template = 12;
    google.protobuf.ListValue labels = 13;
    google.protobuf.Struct tags = 14;

    RepositoryInfo repository_info = 21;
    string project_id = 22;
    string domain_id = 23;

    string created_at = 31;
    string updated_at = 32;
}

message PluginsInfo {
    repeated PluginInfo results = 1;
    int32 total_count = 2;
}

message VersionsInfo {
    // desc: deprecated field
    repeated string version = 1;
    int32 total_count = 2;
    repeated string results = 3;
}

message PluginStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string repository_id = 2;
    // is_required: true
    string domain_id = 3;
}
