syntax = "proto3";

package spaceone.api.notification.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";


service Notification {
    // desc: Creates a new Notification.
    // A notification is a definition of an event to be delivered to the user.
    // When a notification is created, it is propagated through the channel of the project to which the notification belongs,
    // and if an internal channel or user channel is set, the notification is also propagated to the user.
    rpc create (CreateNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notifications" };
    }
    // desc: Push a new Notification directly.
    rpc push (PushNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notifications/push" };
    }
    // desc: Delete the Notification.
    rpc delete (NotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/notification/v1/notification/{notification_id}" };
    }
    // desc: Delete all Notifications.
    rpc delete_all (NotificationDeleteAllRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notification/delete_all" };
    }
    // desc: Change the notifications to read status.
    // When the notification is created, the is_read value is False, and when the set_read method is used, the read state can be changed.
    rpc set_read (SetReadNotificationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/notification/v1/notifications/read" };
    }
    // desc: Gets a single Notification.
    rpc get (GetNotificationRequest) returns (NotificationInfo) {
        option (google.api.http) = { get: "/notification/v1/notification/{notification_id}" };
    }
    // desc: Lists the specified notifications.
    // Can search information using the query format provided by SpaceONE.
    // Detailed information about Query format can be checked in the Search Query pages.
    rpc list (NotificationQuery) returns (NotificationsInfo) {
        option (google.api.http) = {
            get: "/notification/v1/notifications"
            additional_bindings {
                post: "/notification/v1/notifications/search"
            }
        };
    }
    rpc stat (NotificationStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/notification/v1/notifications/stat" };
    }
}

message CreateNotificationRequest {
    enum NotificationType {
        NOTIFICATION_TYPE_NONE = 0;
        INFO = 1;
        ERROR = 2;
        SUCCESS = 3;
        WARNING = 4;
    }
    enum NotificationLEVEL {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }
    // is_required: true
    // desc: The type of resource to which the notification is dispatched.
    // Currently, only "identity.Project" or "identity.User" can be set.
    string resource_type = 1;
    // is_required: true
    // desc: The ID of the resource to which notifications are dispatched.
    // If resource_type is "identity.Project", then resource_id requires a project ID values.
    // If resource_type is "identity.User", then resource_id requires a user ID value.
    string resource_id = 2;
    // is_required: true
    // desc: The topic of notification.
    string topic = 3;
    // is_required: true
    // desc: This message is used for each protocol.
    google.protobuf.Struct message = 4;
    // is_required: false
    // desc: The type of notification.
    NotificationType notification_type = 5;
    // is_required: false
    // desc: The level of notification.
    NotificationLEVEL notification_level = 7;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 11;
}

message PushNotificationRequest {
    // is_required: true
    // desc: The ID of Protocol.
    string protocol_id = 1;
    // is_required: true
    string data = 2;
    // is_required: true
    google.protobuf.Struct message = 3;
    // is_required: false
    string notification_type = 4;
    // is_required: false
    string notification_level = 5;
    // is_required: true
    string domain_id = 11;
}

message NotificationRequest {
    // is_required: true
    // desc: The ID of Notification.
    string notification_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}

message NotificationDeleteAllRequest {
    // is_required: true
    // desc: ID list of users to be deleted
    repeated string users = 1;
    string domain_id = 2;
}

message SetReadNotificationRequest {
    // is_required: true
    // desc: The ID list of notification that want to change read status.
    repeated string notifications = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}

message GetNotificationRequest {
    // is_required: true
    // desc: The ID of Notification.
    string notification_id = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
    // is_required: false
    // desc: The list of the notification information column you want to be returned. It must be specified in the NotificationInfo.
    repeated string only = 3;
}

message NotificationQuery {
    enum NotificationType {
        NOTIFICATION_TYPE_NONE = 0;
        INFO = 1;
        ERROR = 2;
        SUCCESS = 3;
        WARNING = 4;
    }
    enum NotificationLEVEL {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }
    // is_required: false
    // desc: Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    // desc: The ID of notification.
    string notification_id = 2;
    // is_required: false
    // desc: The topic of notification.
    string topic = 3;
    // is_required: false
    // desc: The type of notification.
    NotificationType notification_type = 4;
    // is_required: false
    // desc: The level of notification.
    NotificationLEVEL notification_level = 5;
    // is_required: false
    // desc: Whether or not to check the notification.
    // If is_read is False, the user has not checked the notification yet.
    bool is_read = 6;
    // is_required: false
    // desc: The ID of parent notification. Not used yet.
    string parent_notification_id = 7;
    // is_required: false
    // desc: The project ID to which the notification will be dispatched.
    string project_id = 8;
    // is_required: false
    // desc: The ID of user.
    string user_id = 9;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 11;
}

message NotificationInfo {
    enum NotificationType {
        NOTIFICATION_TYPE_NONE = 0;
        INFO = 1;
        ERROR = 2;
        SUCCESS = 3;
        WARNING = 4;
    }
    enum NotificationLEVEL {
        NONE = 0;
        ALL = 1;
        LV1 = 2;
        LV2 = 3;
        LV3 = 4;
        LV4 = 5;
        LV5 = 6;
    }

    // desc: The ID of notification.
    string notification_id = 1;
    // desc: The topic of notification.
    string topic = 2;
    // desc: The contents of notification.
    // This message is used for each protocol.
    google.protobuf.Struct message = 3;
    // desc: The type of notification.
    NotificationType notification_type = 4;
    // desc: The level of notification.
    NotificationLEVEL notification_level = 5;
    // desc: Whether or not to check the notification.
    // If notification has been returned at least once through the Get or List method, is_read is changed to True.
    bool is_read = 6;
    // desc: The ID of user to whom the notification was dispatched.
    string user_id = 11;
    // desc: The ID of domain
    string domain_id = 12;
    // desc: Notification creation time.
    string created_at = 21;
}

message NotificationsInfo {
    // desc: List of queried notifications.
    repeated NotificationInfo results = 1;
    // desc: Total counts of queried notifications.
    int32 total_count = 2;
}

message NotificationStatQuery {
    // is_required: true
    // desc: Statistics Query format provided by SpaceONE. Please check the link for more information.
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    // desc: The ID of domain.
    string domain_id = 2;
}
