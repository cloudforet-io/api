syntax = "proto3";

package spaceone.api.power_scheduler.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/core/v1/tag.proto";

service ScheduleRule {
    rpc create (CreateScheduleRuleRequest) returns (RuleInfo) {
        option (google.api.http) = { post: "/power-scheduler/v1/schedule-rules" };
    }
    rpc update (UpdateScheduleRuleRequest) returns (RuleInfo) {
        option (google.api.http) = { put: "/power-scheduler/v1/schedule-rule/{schedule_rule_id}" };
    }
    rpc delete (ScheduleRuleRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/power-scheduler/v1/schedule-rule/{schedule_rule_id}" };
    }
    rpc get (GetScheduleRuleRequest) returns (RuleInfo) {
        option (google.api.http) = { get: "/power-scheduler/v1/schedule-rule/{schedule_rule_id}" };
    }
    rpc list (ScheduleRuleQuery) returns (RulesInfo) {
        option (google.api.http) = {
            get: "/power-scheduler/v1/schedule-rules"
            additional_bindings {
                post: "/power-scheduler/v1/schedule-rules/search"
            }
        };
    }
    rpc stat (ScheduleRuleStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/power-scheduler/v1/schedule-rules/stat" };
    }
}

enum ScheduleRuleState {
    RULE_STATE_NONE = 0;
    RUNNING = 1;
    STOPPED = 2;
}

enum RuleType {
    RULE_TYPE_NONE = 0;
    ROUTINE = 1;
    TICKET = 2;
}

message CreateScheduleRuleRequest {
    // is_required: true
    string schedule_id = 1;
    // is_required: false
    string name = 2;
    // is_required: true
    ScheduleRuleState state = 3;
    // is_required: true
    RuleType rule_type = 4;
    // is_required: true
    repeated Rule rule = 5;
    // is_required: false
    int32 priority = 6;
    // is_required: false
    repeated spaceone.api.core.v1.Tag tags = 11;
    // is_required: true
    string user_id = 23;
    // is_required: true
    string domain_id = 22;
}

message UpdateScheduleRuleRequest {
    // is_required: true
    string schedule_rule_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    ScheduleRuleState state = 3;
    // is_required: false
    repeated Rule rule = 4;
    // is_required: false
    repeated spaceone.api.core.v1.Tag tags = 11;
    // is_required: true
    string domain_id = 22;
}

message ScheduleRuleRequest {
    // is_required: true
    string schedule_rule_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetScheduleRuleRequest {
    // is_required: true
    string schedule_rule_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message ScheduleRuleQuery {
    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string schedule_rule_id = 2;
    // is_required: false
    string schedule_id = 3;
    // is_required: false
    string name = 4;
    // is_required: false
    int32 priority = 5;
    // is_required: false
    ScheduleRuleState state = 6;
    // is_required: false
    string project_id = 8;
    // is_required: true
    string domain_id = 9;
}

message Rule {
    oneof format {
        string day = 1;
        string date = 2;
    }
    repeated int32 times = 3;
}

message RuleInfo {
    string schedule_rule_id = 1;
    string name = 2;
    ScheduleRuleState state = 3;
    RuleType rule_type = 4;
    repeated Rule rule = 5;
    int32 priority = 6;
    string schedule_id = 7;

    repeated spaceone.api.core.v1.Tag tags = 12;
    string project_id = 21;
    string domain_id = 22;

    string created_by = 23;
    google.protobuf.Timestamp created_at = 31;
}

message RulesInfo {
    repeated RuleInfo results = 1;
    int32 total_count = 2;
}

message ScheduleRuleStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}
