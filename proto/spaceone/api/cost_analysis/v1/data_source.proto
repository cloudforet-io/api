syntax = "proto3";

package spaceone.api.cost_analysis.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v1/query.proto";
import "spaceone/api/cost_analysis/v1/job.proto";


service DataSource {
    rpc register (RegisterDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { post: "/cost-analysis/v1/data-sources" };
    }
    rpc update (UpdateDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/cost-analysis/v1/data-source/{data_source_id}" };
    }
    rpc update_plugin (UpdateDataSourcePluginRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/cost-analysis/v1/data-source/{data_source_id}/plugin" };
    }
    rpc verify_plugin (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { post: "/cost-analysis/v1/data-source/{data_source_id}/plugin/verify" };
    }
    rpc enable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/cost-analysis/v1/data-source/{data_source_id}/enable" };
    }
    rpc disable (DataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { put: "/cost-analysis/v1/data-source/{data_source_id}/disable" };
    }
    rpc deregister (DataSourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = { delete: "/cost-analysis/v1/data-source/{data_source_id}" };
    }
    rpc sync (SyncDataSourceRequest) returns (spaceone.api.cost_analysis.v1.JobInfo) {
        option (google.api.http) = { post: "/cost-analysis/v1/data-source/{data_source_id}/sync" };
    }
    rpc get (GetDataSourceRequest) returns (DataSourceInfo) {
        option (google.api.http) = { get: "/cost-analysis/v1/data-source/{data_source_id}" };
    }
    rpc list (DataSourceQuery) returns (DataSourcesInfo) {
        option (google.api.http) = {
            get: "/cost-analysis/v1/data-sources"
            additional_bindings {
                post: "/cost-analysis/v1/data-sources/search"
            }
        };
    }
    rpc stat (DataSourceStatQuery) returns (google.protobuf.Struct) {
        option (google.api.http) = { post: "/cost-analysis/v1/data-sources/stat" };
    }
}

message PluginInfo {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    string plugin_id = 1;
    string version = 2;
    google.protobuf.Struct options = 3;
    google.protobuf.Struct metadata = 4;
    google.protobuf.Struct secret_data = 5;
    string schema = 6;
    string secret_id = 7;
    UpgradeMode upgrade_mode = 8;
}

message RegisterDataSourceRequest {
    enum DataSourceType {
        NONE = 0;
        LOCAL = 1;
        EXTERNAL = 2;
    }

    // is_required: true
    string name = 1;
    // is_required: true
    DataSourceType data_source_type = 2;
    // is_required: false
    string provider = 3;
    // is_required: false
    google.protobuf.Struct template = 4;
    // is_required: false
    PluginInfo plugin_info = 5;
    // is_required: false
    google.protobuf.Struct tags = 6;
    // is_required: true
    string domain_id = 11;
}

message UpdateDataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: false
    string name = 2;
    // is_required: false
    google.protobuf.Struct template = 3;
    // is_required: false
    google.protobuf.Struct tags = 4;
    // is_required: true
    string domain_id = 11;
}

message UpdateDataSourcePluginRequest {
    enum UpgradeMode {
        NONE = 0;
        MANUAL = 1;
        AUTO = 2;
    }

    // is_required: true
    string data_source_id = 1;
    // is_required: false
    string version = 2;
    // is_required: false
    google.protobuf.Struct options = 3;
    // is_required: false
    UpgradeMode upgrade_mode = 4;
    // is_required: true
    string domain_id = 11;
}

message SyncDataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: false
    string start = 2;
    // is_required: false
    bool no_preload_cache = 3;
    // is_required: true
    string domain_id = 11;
}

message DataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: true
    string domain_id = 2;
}

message GetDataSourceRequest {
    // is_required: true
    string data_source_id = 1;
    // is_required: true
    string domain_id = 2;
    // is_required: false
    repeated string only = 3;
}

message DataSourceQuery {
    enum DataSourceType {
        NONE = 0;
        LOCAL = 1;
        EXTERNAL = 2;
    }

    // is_required: false
    spaceone.api.core.v1.Query query = 1;
    // is_required: false
    string data_source_id = 2;
    // is_required: false
    string name = 3;
    // is_required: false
    string state = 4;
    // is_required: false
    DataSourceType data_source_type = 5;
    // is_required: false
    string provider = 6;
    // is_required: true
    string domain_id = 11;
}

message DataSourceInfo {
    enum State {
        STATE_NONE = 0;
        ENABLED = 1;
        DISABLED = 2;
    }

    enum DataSourceType {
        TYPE_NONE = 0;
        LOCAL = 1;
        EXTERNAL = 2;
    }

    string data_source_id = 1;
    string name = 2;
    State state = 3;
    DataSourceType data_source_type = 4;
    string provider = 5;
    PluginInfo plugin_info = 6;
    google.protobuf.Struct template = 7;
    google.protobuf.Struct tags = 8;
    string domain_id = 11;
    string created_at = 21;
    string last_synchronized_at = 22;
}

message DataSourcesInfo {
    repeated DataSourceInfo results = 1;
    int32 total_count = 2;
}

message DataSourceStatQuery {
    // is_required: true
    spaceone.api.core.v1.StatisticsQuery query = 1;
    // is_required: true
    string domain_id = 2;
}
