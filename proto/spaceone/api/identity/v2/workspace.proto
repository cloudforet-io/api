syntax = "proto3";

package spaceone.api.identity.v2;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/identity/v2";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";


service Workspace {
  rpc create (CreateWorkSpaceRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/create"
      body: "*"
    };
  }

  rpc update (UpdateWorkSpaceRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/update"
      body: "*"
    };
  }

  rpc change_workspace_group(ChangeWorkspaceGroupRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/change-workspace-group"
      body: "*"
    };
  }

  rpc delete (WorkspaceDeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/delete"
      body: "*"
    };
  }

  rpc enable (WorkspaceRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/enable"
      body: "*"
    };
  }

  rpc disable (WorkspaceRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/disable"
      body: "*"
    };
  }

  rpc add_package (WorkspacePackageRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/add-package"
      body: "*"
    };
  }

  rpc remove_package (WorkspacePackageRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/remove-package"
      body: "*"
    };
  }

  rpc get (WorkspaceRequest) returns (WorkspaceInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/get"
      body: "*"
    };
  }

  rpc check (WorkspaceCheckRequest) returns (google.protobuf.Empty) {}

  rpc list (WorkspaceSearchQuery) returns (WorkspacesInfo) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/list"
      body: "*"
    };
  }

  rpc analyze (WorkspaceAnalyzeQuery) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/analyze"
      body: "*"
    };
  }

  rpc stat (WorkspaceStatQuery) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/identity/v2/workspace/stat"
      body: "*"
    };
  }
}

message WorkspaceCostInfo {
  float day = 1;
  float month = 2;
}

//{
//  "name": "Cloudforet Workspace"
//}
message CreateWorkSpaceRequest {
  string name = 1;
  google.protobuf.Struct tags = 2;
}

//{
//  "workspace_id": "workspace-a1b2c3d4e5f6",
//  "name": "Cloudforet Workspace"
//}
message UpdateWorkSpaceRequest {
  string workspace_id = 1;
  // +optional
  string name = 2;
  // +optional
  google.protobuf.Struct tags = 3;
}

//{
//  "workspace_id": "workspace-a1b2c3d4e5f6",
//  "workspace_group_id": "wg-a1b2c3d4e5f6"
//}
message ChangeWorkspaceGroupRequest {
  string workspace_id = 1;
  // +optional
  string workspace_group_id = 2;
}

//{
//  "workspace_id": "workspace-a1b2c3d4e5f6",
//  "force": true
//}
message WorkspaceDeleteRequest {
  string workspace_id = 1;
  bool force = 2;
}

//{
//  "workspace_id": "workspace-a1b2c3d4e5f6",
//  "package_id": "package-a1b2c3d4e5f6"
//}
message WorkspacePackageRequest {
  string workspace_id = 1;
  string package_id = 2;
}

//{
//  "workspace_id": "workspace-a1b2c3d4e5f6"
//}
message WorkspaceRequest {
  string workspace_id = 1;
}

message WorkspaceCheckRequest {
  string workspace_id = 1;
  string domain_id = 21;
}

//{
//  "workspace_id": "workspace-a1b2c3d4e5f6",
//  "name": "Cloudforet Workspace",
//  "state": "ENABLED",
//  "created_by": "cloudforet@cloudforet.io",
//  "dormant_ttl": -1,
//  "cost_info": {},
//  "workspace_group_id": "wg-a1b2c3d4e5f6",
//  "domain_id": "domain-a1b2c3d4e5f6",
//  "created_at": "2024-11-12T08:14:04.011Z"
//}
message WorkspaceInfo {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
  }

  string workspace_id = 1;
  string name = 2;
  State state = 3;
  google.protobuf.Struct tags = 4;
  string created_by = 5;
  repeated string references = 6;
  bool is_managed = 7;
  repeated string packages = 8;

  bool is_dormant = 11;
  int32 dormant_ttl = 12;
  int32 service_account_count = 13;
  int32 user_count = 14;
  WorkspaceCostInfo cost_info = 15;

  string workspace_group_id = 21;
  string domain_id = 22;
  string trusted_account_id = 23;
  string created_at = 31;
  string last_synced_at = 32;
  string dormant_updated_at = 33;
  string changed_at = 34;
}

//{
//  "query": {
//    "page": {
//      "start": 1,
//      "limit": 10
//    }
//  }
//}
message WorkspaceSearchQuery {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
  }

  // +optional
  spaceone.api.core.v2.Query query = 1;
  // +optional
  string workspace_id = 2;
  // +optional
  string name = 3;
  // +optional
  State state = 4;
  // +optional
  string created_by = 5;
  // +optional
  bool is_managed = 6;
  // +optional
  bool is_dormant = 7;
  // +optional
  string workspace_group_id = 8;
}

//{
//  "results": [
//  {
//    "workspace_id": "workspace-a1b2c3d4e5f6",
//    "name": "Cloudforet Workspace",
//    "state": "ENABLED",
//    "created_by": "wonny@cloudforet.io",
//    "dormant_ttl": -1,
//    "service_account_count": 0,
//    "user_count": 0,
//    "cost_info": {},
//    "domain_id": "domain-a1b2c3d4e5f6",
//    "created_at": "2024-11-12T08:25:08.762Z"
//  },
//  {
//    "workspace_id": "workspace-g7h8i9j1k2l3",
//    "name": "Wonny Workspace",
//    "state": "ENABLED",
//    "created_by": "cloudforet@cloudforet.io",
//    "dormant_ttl": 0,
//    "service_account_count": 0,
//    "user_count": 0,
//    "cost_info": {},
//    "workspace_group_id": "wg-a1b2c3d4e5f6",
//    "domain_id": "domain-g7h8i9j1k2l3",
//    "created_at": "2024-11-12T08:14:04.011Z",
//    "changed_at": "2024-11-12T08:43:39.945Z"
//  }
//  ],
//  "total_count": 2
//}
message WorkspacesInfo {
  repeated WorkspaceInfo results = 1;
  int32 total_count = 2;
}

message WorkspaceAnalyzeQuery {
  spaceone.api.core.v2.AnalyzeQuery query = 1;
}

message WorkspaceStatQuery {
  spaceone.api.core.v2.StatisticsQuery query = 1;
}
