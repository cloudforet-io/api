// User API which allows member management within project, company, and domain
// note: Administrator must register User first.
syntax = "proto3";

package spaceone.api.identity.v2;

option go_package = "github.com/cloudforet-io/api/dist/go/spaceone/api/identity/v2";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "spaceone/api/core/v2/query.proto";
import "spaceone/api/identity/v2/workspace.proto";


service User {
  // You can create user. after create user you have to binding role to user.
  // See role-binding create api.
  // External type user do not need password.
  rpc create (CreateUserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/create"
      body: "*"
    };
  }

  // Update user info by given user_id
  rpc update (UpdateUserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/update"
      body: "*"
    };
  }

  rpc verify_email (VerifyEmailUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/identity/v2/user/verify-email"
      body: "*"
    };
  }

  // Disable MFA for user. If this api is called, send email to user.
  rpc disable_mfa (DisableMFAUserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/disable-mfa"
      body: "*"
    };
  }

  rpc set_required_actions (SetRequiredActionsUserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/set-required-actions"
      body: "*"
    };
  }

  // Sets the user's refresh token timeout. This API can only be used by users with the `DOMAIN_ADMIN` role.
  // Min value is `1800` seconds and max value is `2592000` seconds
  rpc set_refresh_timeout (SetRefreshTimeout) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/set-refresh-timeout"
      body: "*"
    };
  }

  rpc enable (UserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/enable"
      body: "*"
    };
  }

  rpc disable (UserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/disable"
      body: "*"
    };
  }

  rpc delete (UserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/identity/v2/user/delete"
      body: "*"
    };
  }

  rpc get (UserRequest) returns (UserInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/get"
      body: "*"
    };
  }

  rpc list (UserSearchQuery) returns (UsersInfo) {
    option (google.api.http) = {
      post: "/identity/v2/user/list"
      body: "*"
    };
  }

  rpc stat (UserStatQuery) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/identity/v1/user/stat"
      body: "*"
    };
  }
}

enum AuthType {
  NONE_BACKEND = 0;
  LOCAL = 1;
  EXTERNAL = 2;
}

enum UserRequiredAction {
  UPDATE_PASSWORD = 0;
  ENFORCE_MFA = 1;
}

message MFA {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
  }

  State state = 1;
  string mfa_type = 2;
  google.protobuf.Struct options = 3;

}

//{
//  "user_id": "wonny@cloudforet.io",
//  "password": "Password1234!",
//  "reset_password": false,
//  "name": "Wonny",
//  "email": "wonny@cloudforet.io",
//  "auth_type": "LOCAL",
//  "language": "en",
//  "timezone": "UTC"
//}
message CreateUserRequest {
  string user_id = 1;
  // When auth_type is LOCAL, password is required.
  // +optional
  string password = 2;
  // +optional
  string name = 3;
  // +optional
  string email = 4;
  AuthType auth_type = 5;
  // en,ko
  // +optional
  string language = 6;
  // UTC, Asia/Seoul
  // +optional
  string timezone = 7;
  // +optional
  google.protobuf.Struct tags = 8;
  // If reset_password is true, send email
  bool reset_password = 9;
  // +optional
  string enforce_mfa_state = 10;
  // +optional
  string enforce_mfa_type = 11;

}

//{
//  "user_id": "wonny@cloudforet.io",
//  "password": "Password1234!!",
//  "reset_password": false,
//  "name": "Cloudforet",
//  "email": "cloudforet@cloudforet.io",
//  "auth_type": "LOCAL",
//  "language": "en",
//  "timezone": "UTC"
//}
message UpdateUserRequest {
  string user_id = 1;
  // +optional
  string password = 2;
  // +optional
  string name = 3;
  // +optional
  string email = 4;
  // +optional
  string language = 5;
  // +optional
  string timezone = 6;
  // +optional
  google.protobuf.Struct tags = 7;
  // +optional
  bool reset_password = 8;
  // +optional
  string enforce_mfa_state = 9;
  // +optional
  string enforce_mfa_type = 10;
}

//{
//  "user_id": "example@cloudforet.com",
//  "email": "example@cloudforet.com"
//}
message VerifyEmailUserRequest {
  string user_id = 1;
  // +optional
  string email = 2;
}

//{
//  "user_id": "example@cloudforet.com"
//}
message DisableMFAUserRequest {
  string user_id = 1;
}

//{
//  "user_id": "example@cloudforet.com",
//  "required_actions": ["UPDATE_PASSWORD"]
//}
message SetRequiredActionsUserRequest {
  string user_id = 1;
  repeated UserRequiredAction required_actions = 2;
}

//{
//   "user_id": "wonny@cloudforet.io",
//   "refresh_token_timout": 10800
//}
message SetRefreshTimeout {
  string user_id = 1;
  int32 refresh_timeout = 2;

}


//{
//  "user_id": "example@cloudforet.com"
//}
message UserRequest {
  string user_id = 1;
}

//{
//  "auth_type": "LOCAL",
//  "query": {
//    "page": {
//      "start": 1,
//      "limit": 10
//    },
//    "sort": [{
//      "key": "created_at",
//      "desc": true
//    }]
//  }
//}
message UserSearchQuery {
  enum State {
    NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
    PENDING = 3;
  }

  // +optional
  spaceone.api.core.v2.Query query = 1;
  // +optional
  string user_id = 2;
  // +optional
  string name = 3;
  // +optional
  State state = 4;
  // +optional
  string email = 5;
  // +optional
  AuthType auth_type = 6;
}

//{
//  "user_id": "wonny@cloudforet.io",
//  "password": "Password1234!",
//  "name": "Wonny",
//  "email": "wonny@cloudforet.io",
//  "auth_type": "LOCAL",
//  "language": "en",
//  "timezone": "UTC"
//}
message UserInfo {
  enum State {
    STATE_NONE = 0;
    ENABLED = 1;
    DISABLED = 2;
    PENDING = 3;
  }
  enum RoleType {
    ROLE_TYPE_NONE = 0;
    DOMAIN_ADMIN = 1;
    USER = 2;
  }

  string user_id = 1;
  string name = 2;
  State state = 3;
  string email = 4;
  bool email_verified = 5;
  AuthType auth_type = 6;
  string role_id = 7;
  RoleType role_type = 8;
  MFA mfa = 9;
  string language = 11;
  string timezone = 12;
  repeated UserRequiredAction required_actions = 13;
  int32 refresh_timeout = 14;
  google.protobuf.Struct tags = 15;
  string domain_id = 21;
  string created_at = 31;
  string last_accessed_at = 32;
}

//{
//  "results": [
//    {
//      "auth_type": "LOCAL",
//      "created_at": "2024-11-14T01:53:19.224Z",
//      "domain_id": "domain-a1b2c3d4e5f6",
//      "email": "wonny@cloudforet.io",
//      "language": "en",
//      "name": "Wonny",
//      "role_type": "USER",
//      "state": "PENDING",
//      "timezone": "UTC",
//      "user_id": "wonny@cloudforet.io"
//    },
//    {
//      "auth_type": "LOCAL",
//      "created_at": "2024-11-12T04:46:41.209Z",
//      "domain_id": "domain-a1b2c3d4e5f6",
//      "email": "cloudforet@cloudforet.io",
//      "language": "ko",
//      "last_accessed_at": "2024-11-13T07:42:46.511Z",
//      "name": "Cloudforet Admin",
//      "role_id": "managed-domain-admin",
//      "role_type": "DOMAIN_ADMIN",
//      "state": "ENABLED",
//      "timezone": "UTC",
//      "user_id": "cloudforet@cloudforet.io"
//    }
//  ],
//  "total_count": 2
//}
message UsersInfo {
  repeated UserInfo results = 1;
  int32 total_count = 2;
}

message UserStatQuery {
  spaceone.api.core.v2.StatisticsQuery query = 1;
}

