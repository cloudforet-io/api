// A ProjectChannel is a destination  where Notifications are delivered. Notifications are generated via the Protocol set by each Project.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: spaceone/api/notification/v1/project_channel.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NotificationLevel int32

const (
	NotificationLevel_NONE NotificationLevel = 0
	NotificationLevel_LV1  NotificationLevel = 1
	NotificationLevel_LV2  NotificationLevel = 2
	NotificationLevel_LV3  NotificationLevel = 3
	NotificationLevel_LV4  NotificationLevel = 4
	NotificationLevel_LV5  NotificationLevel = 5
)

// Enum value maps for NotificationLevel.
var (
	NotificationLevel_name = map[int32]string{
		0: "NONE",
		1: "LV1",
		2: "LV2",
		3: "LV3",
		4: "LV4",
		5: "LV5",
	}
	NotificationLevel_value = map[string]int32{
		"NONE": 0,
		"LV1":  1,
		"LV2":  2,
		"LV3":  3,
		"LV4":  4,
		"LV5":  5,
	}
)

func (x NotificationLevel) Enum() *NotificationLevel {
	p := new(NotificationLevel)
	*p = x
	return p
}

func (x NotificationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_project_channel_proto_enumTypes[0].Descriptor()
}

func (NotificationLevel) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_project_channel_proto_enumTypes[0]
}

func (x NotificationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationLevel.Descriptor instead.
func (NotificationLevel) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{0}
}

type ProjectChannelSchedule_DayOfWeek int32

const (
	ProjectChannelSchedule_NONE ProjectChannelSchedule_DayOfWeek = 0
	ProjectChannelSchedule_MON  ProjectChannelSchedule_DayOfWeek = 1
	ProjectChannelSchedule_TUE  ProjectChannelSchedule_DayOfWeek = 2
	ProjectChannelSchedule_WED  ProjectChannelSchedule_DayOfWeek = 3
	ProjectChannelSchedule_THU  ProjectChannelSchedule_DayOfWeek = 4
	ProjectChannelSchedule_FRI  ProjectChannelSchedule_DayOfWeek = 5
	ProjectChannelSchedule_SAT  ProjectChannelSchedule_DayOfWeek = 6
	ProjectChannelSchedule_SUN  ProjectChannelSchedule_DayOfWeek = 7
)

// Enum value maps for ProjectChannelSchedule_DayOfWeek.
var (
	ProjectChannelSchedule_DayOfWeek_name = map[int32]string{
		0: "NONE",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	ProjectChannelSchedule_DayOfWeek_value = map[string]int32{
		"NONE": 0,
		"MON":  1,
		"TUE":  2,
		"WED":  3,
		"THU":  4,
		"FRI":  5,
		"SAT":  6,
		"SUN":  7,
	}
)

func (x ProjectChannelSchedule_DayOfWeek) Enum() *ProjectChannelSchedule_DayOfWeek {
	p := new(ProjectChannelSchedule_DayOfWeek)
	*p = x
	return p
}

func (x ProjectChannelSchedule_DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectChannelSchedule_DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_project_channel_proto_enumTypes[1].Descriptor()
}

func (ProjectChannelSchedule_DayOfWeek) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_project_channel_proto_enumTypes[1]
}

func (x ProjectChannelSchedule_DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectChannelSchedule_DayOfWeek.Descriptor instead.
func (ProjectChannelSchedule_DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{0, 0}
}

type ProjectChannelQuery_ProjectChannelState int32

const (
	ProjectChannelQuery_NONE     ProjectChannelQuery_ProjectChannelState = 0
	ProjectChannelQuery_ENABLED  ProjectChannelQuery_ProjectChannelState = 1
	ProjectChannelQuery_DISABLED ProjectChannelQuery_ProjectChannelState = 2
)

// Enum value maps for ProjectChannelQuery_ProjectChannelState.
var (
	ProjectChannelQuery_ProjectChannelState_name = map[int32]string{
		0: "NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	ProjectChannelQuery_ProjectChannelState_value = map[string]int32{
		"NONE":     0,
		"ENABLED":  1,
		"DISABLED": 2,
	}
)

func (x ProjectChannelQuery_ProjectChannelState) Enum() *ProjectChannelQuery_ProjectChannelState {
	p := new(ProjectChannelQuery_ProjectChannelState)
	*p = x
	return p
}

func (x ProjectChannelQuery_ProjectChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectChannelQuery_ProjectChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_project_channel_proto_enumTypes[2].Descriptor()
}

func (ProjectChannelQuery_ProjectChannelState) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_project_channel_proto_enumTypes[2]
}

func (x ProjectChannelQuery_ProjectChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectChannelQuery_ProjectChannelState.Descriptor instead.
func (ProjectChannelQuery_ProjectChannelState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{6, 0}
}

type ProjectChannelInfo_ProjectChannelState int32

const (
	ProjectChannelInfo_NONE     ProjectChannelInfo_ProjectChannelState = 0
	ProjectChannelInfo_ENABLED  ProjectChannelInfo_ProjectChannelState = 1
	ProjectChannelInfo_DISABLED ProjectChannelInfo_ProjectChannelState = 2
)

// Enum value maps for ProjectChannelInfo_ProjectChannelState.
var (
	ProjectChannelInfo_ProjectChannelState_name = map[int32]string{
		0: "NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	ProjectChannelInfo_ProjectChannelState_value = map[string]int32{
		"NONE":     0,
		"ENABLED":  1,
		"DISABLED": 2,
	}
)

func (x ProjectChannelInfo_ProjectChannelState) Enum() *ProjectChannelInfo_ProjectChannelState {
	p := new(ProjectChannelInfo_ProjectChannelState)
	*p = x
	return p
}

func (x ProjectChannelInfo_ProjectChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectChannelInfo_ProjectChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_project_channel_proto_enumTypes[3].Descriptor()
}

func (ProjectChannelInfo_ProjectChannelState) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_project_channel_proto_enumTypes[3]
}

func (x ProjectChannelInfo_ProjectChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectChannelInfo_ProjectChannelState.Descriptor instead.
func (ProjectChannelInfo_ProjectChannelState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{7, 0}
}

type ProjectChannelSchedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Day of the week to be notified.
	// As a list type, only types that can be specified from MON to SUN can be set.
	DayOfWeek []ProjectChannelSchedule_DayOfWeek `protobuf:"varint,1,rep,packed,name=day_of_week,json=dayOfWeek,proto3,enum=spaceone.api.notification.v1.ProjectChannelSchedule_DayOfWeek" json:"day_of_week,omitempty"`
	// Start time to receive notifications.
	// Only integer type can be set, and 0 to 23 can be.
	StartHour int32 `protobuf:"varint,2,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// End time to receive notifications.
	// Only integer type can be set, and 1 to 24 can be.
	EndHour       int32 `protobuf:"varint,3,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectChannelSchedule) Reset() {
	*x = ProjectChannelSchedule{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectChannelSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectChannelSchedule) ProtoMessage() {}

func (x *ProjectChannelSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectChannelSchedule.ProtoReflect.Descriptor instead.
func (*ProjectChannelSchedule) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{0}
}

func (x *ProjectChannelSchedule) GetDayOfWeek() []ProjectChannelSchedule_DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return nil
}

func (x *ProjectChannelSchedule) GetStartHour() int32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *ProjectChannelSchedule) GetEndHour() int32 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

//	{
//	   "protocol_id": "protocol-ab94ea7d574e",
//	   "name": "sms-test",
//	   "data": {
//	       "phone_number": "01011112222"
//	   },
//	   "is_subscribe": true,
//	   "subscriptions": ["monitoring.Alert"],
//	   "notification_level": "LV1",
//	   "is_scheduled": true,
//	   "schedule": {
//	       "day_of_week": [
//	           "MON",
//	           "TUE",
//	           "WED",
//	           "THU",
//	           "FRI"
//	       ],
//	       "end_hour": 9
//	   },
//	   "project_id": "project-52a423012d5e"
//	}
type CreateProjectChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of protocol that will be set in project channel.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The name of Project Channel. It can have a maximum of 255 characters.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The data for using project channel.
	// This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
	// In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
	// if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
	Data *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Indicates whether subscriptions will be used.
	// +optional
	IsSubscribe bool `protobuf:"varint,4,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// When using subscriptions, it indicates the topic list to subscription.
	// If is_subscribe is set to false, this value is ignored.
	// +optional
	Subscriptions []string `protobuf:"bytes,5,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Set the level of notification.
	// If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
	// +optional
	NotificationLevel NotificationLevel `protobuf:"varint,6,opt,name=notification_level,json=notificationLevel,proto3,enum=spaceone.api.notification.v1.NotificationLevel" json:"notification_level,omitempty"`
	// Indicates whether schedule will be used.
	// +optional
	IsScheduled bool `protobuf:"varint,7,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// Schedule for which you want to receive notifications through the project channel.
	// +optional
	Schedule *ProjectChannelSchedule `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The tags for project channel.
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	// The ID of project to which the project channel belongs.
	ProjectId     string `protobuf:"bytes,21,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectChannelRequest) Reset() {
	*x = CreateProjectChannelRequest{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectChannelRequest) ProtoMessage() {}

func (x *CreateProjectChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateProjectChannelRequest) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *CreateProjectChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectChannelRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateProjectChannelRequest) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *CreateProjectChannelRequest) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *CreateProjectChannelRequest) GetNotificationLevel() NotificationLevel {
	if x != nil {
		return x.NotificationLevel
	}
	return NotificationLevel_NONE
}

func (x *CreateProjectChannelRequest) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *CreateProjectChannelRequest) GetSchedule() *ProjectChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *CreateProjectChannelRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateProjectChannelRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

//	{
//	   "project_channel_id": "project-ch-488df94d026d",
//	   "name": "sms2-test",
//	   "data": {
//	       "phone_number": "01033334444"
//	   },
//	   "notification_level": "LV2",
//	   "tags": {
//	       "a": "b"
//	   }
//	}
type UpdateProjectChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of project channel.
	ProjectChannelId string `protobuf:"bytes,1,opt,name=project_channel_id,json=projectChannelId,proto3" json:"project_channel_id,omitempty"`
	// The name of Project Channel. It can have a maximum of 255 characters.
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The data for using project channel.
	// This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
	// In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
	// if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
	// +optional
	Data *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Set the level of notification.
	// If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
	// +optional
	NotificationLevel NotificationLevel `protobuf:"varint,5,opt,name=notification_level,json=notificationLevel,proto3,enum=spaceone.api.notification.v1.NotificationLevel" json:"notification_level,omitempty"`
	// The tags for project channel.
	// +optional
	Tags *_struct.Struct `protobuf:"bytes,7,opt,name=tags,proto3" json:"tags,omitempty"`
	// The ID of domain.
	DomainId      string `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectChannelRequest) Reset() {
	*x = UpdateProjectChannelRequest{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectChannelRequest) ProtoMessage() {}

func (x *UpdateProjectChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateProjectChannelRequest) GetProjectChannelId() string {
	if x != nil {
		return x.ProjectChannelId
	}
	return ""
}

func (x *UpdateProjectChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateProjectChannelRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateProjectChannelRequest) GetNotificationLevel() NotificationLevel {
	if x != nil {
		return x.NotificationLevel
	}
	return NotificationLevel_NONE
}

func (x *UpdateProjectChannelRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateProjectChannelRequest) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

//	{
//	   "project_channel_id": "project-ch-488df94d026d",
//	   "is_scheduled": true,
//	   "schedule": {
//	       "day_of_week": [
//	           "MON",
//	           "WED",
//	           "FRI"
//	       ],
//	       "end_hour": 9
//	   }
//	}
type UpdateProjectChannelScheduleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of project channel.
	ProjectChannelId string `protobuf:"bytes,1,opt,name=project_channel_id,json=projectChannelId,proto3" json:"project_channel_id,omitempty"`
	// Indicates whether schedule will be used.
	IsScheduled bool `protobuf:"varint,2,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// Schedule for which you want to receive notifications through the project channel.
	// +optional
	Schedule      *ProjectChannelSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectChannelScheduleRequest) Reset() {
	*x = UpdateProjectChannelScheduleRequest{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectChannelScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectChannelScheduleRequest) ProtoMessage() {}

func (x *UpdateProjectChannelScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectChannelScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectChannelScheduleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateProjectChannelScheduleRequest) GetProjectChannelId() string {
	if x != nil {
		return x.ProjectChannelId
	}
	return ""
}

func (x *UpdateProjectChannelScheduleRequest) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *UpdateProjectChannelScheduleRequest) GetSchedule() *ProjectChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

//	{
//	   "project_channel_id": "project-ch-cff007433a23",
//	   "is_subscribe": true,
//	   "subscriptions": [
//	       "monitoring.Alert"
//	   ]
//	}
type UpdateProjectChannelSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of project channel.
	ProjectChannelId string `protobuf:"bytes,1,opt,name=project_channel_id,json=projectChannelId,proto3" json:"project_channel_id,omitempty"`
	// Indicates whether subscriptions will be used.
	IsSubscribe bool `protobuf:"varint,2,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// When using subscriptions, it indicates the topic list to subscription.
	// If is_subscribe is set to false, this value is ignored.
	// +optional
	Subscriptions []string `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectChannelSubscriptionRequest) Reset() {
	*x = UpdateProjectChannelSubscriptionRequest{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectChannelSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectChannelSubscriptionRequest) ProtoMessage() {}

func (x *UpdateProjectChannelSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectChannelSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectChannelSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateProjectChannelSubscriptionRequest) GetProjectChannelId() string {
	if x != nil {
		return x.ProjectChannelId
	}
	return ""
}

func (x *UpdateProjectChannelSubscriptionRequest) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *UpdateProjectChannelSubscriptionRequest) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

//	{
//	   "project_channel_id": "project-ch-ffdb1d6cc774"
//	}
type ProjectChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of project channel.
	ProjectChannelId string `protobuf:"bytes,1,opt,name=project_channel_id,json=projectChannelId,proto3" json:"project_channel_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ProjectChannelRequest) Reset() {
	*x = ProjectChannelRequest{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectChannelRequest) ProtoMessage() {}

func (x *ProjectChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectChannelRequest.ProtoReflect.Descriptor instead.
func (*ProjectChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{5}
}

func (x *ProjectChannelRequest) GetProjectChannelId() string {
	if x != nil {
		return x.ProjectChannelId
	}
	return ""
}

//	{
//	   "query": {
//	       "filter": [
//	           {
//	               "key": "state",
//	               "value": "ENABLED",
//	               "operator": "eq"
//	           }
//	       ]
//	   }
//	}
type ProjectChannelQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Query format provided by SpaceONE. Please check the link for more information.
	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// The ID of project channel.
	// +optional
	ProjectChannelId string `protobuf:"bytes,2,opt,name=project_channel_id,json=projectChannelId,proto3" json:"project_channel_id,omitempty"`
	// The name of project channel.
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The state of project channel. ENABLED or DISABLED only.
	// +optional
	State ProjectChannelQuery_ProjectChannelState `protobuf:"varint,4,opt,name=state,proto3,enum=spaceone.api.notification.v1.ProjectChannelQuery_ProjectChannelState" json:"state,omitempty"`
	// Indicates whether subscriptions will be used.
	// +optional
	IsSubscribe bool `protobuf:"varint,5,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// Indicates whether schedule will be used.
	// +optional
	IsScheduled bool `protobuf:"varint,6,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// The level of notification.
	// +optional
	NotificationLevel NotificationLevel `protobuf:"varint,7,opt,name=notification_level,json=notificationLevel,proto3,enum=spaceone.api.notification.v1.NotificationLevel" json:"notification_level,omitempty"`
	// The ID of project to which the project channel belongs.
	// +optional
	ProjectId string `protobuf:"bytes,21,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of protocol set in the project channel.
	// +optional
	ProtocolId string `protobuf:"bytes,22,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The ID of secret encrypted data in the security service
	// +optional
	SecretId      string `protobuf:"bytes,23,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectChannelQuery) Reset() {
	*x = ProjectChannelQuery{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectChannelQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectChannelQuery) ProtoMessage() {}

func (x *ProjectChannelQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectChannelQuery.ProtoReflect.Descriptor instead.
func (*ProjectChannelQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{6}
}

func (x *ProjectChannelQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ProjectChannelQuery) GetProjectChannelId() string {
	if x != nil {
		return x.ProjectChannelId
	}
	return ""
}

func (x *ProjectChannelQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectChannelQuery) GetState() ProjectChannelQuery_ProjectChannelState {
	if x != nil {
		return x.State
	}
	return ProjectChannelQuery_NONE
}

func (x *ProjectChannelQuery) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *ProjectChannelQuery) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *ProjectChannelQuery) GetNotificationLevel() NotificationLevel {
	if x != nil {
		return x.NotificationLevel
	}
	return NotificationLevel_NONE
}

func (x *ProjectChannelQuery) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectChannelQuery) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *ProjectChannelQuery) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

//	{
//	   "project_channel_id": "project-ch-488df94d026d",
//	   "name": "sms-test",
//	   "state": "ENABLED",
//	   "data": {
//	       "phone_number": "01011112222"
//	   },
//	   "notification_level": "LV1",
//	   "tags": {},
//	   "protocol_id": "protocol-ab94ea7d574e",
//	   "project_id": "project-aa723eed3d69",
//	   "workspace_id": "workspace-123456789012"
//	   "domain_id": "domain-58010aa2e451",
//	   "created_at": "2022-06-13T07:35:28.305Z"
//	}
type ProjectChannelInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of project channel.
	ProjectChannelId string `protobuf:"bytes,1,opt,name=project_channel_id,json=projectChannelId,proto3" json:"project_channel_id,omitempty"`
	// The name of project channel
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The state of project channel. ENABLED or DISABLED only.
	State ProjectChannelInfo_ProjectChannelState `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.notification.v1.ProjectChannelInfo_ProjectChannelState" json:"state,omitempty"`
	// The data for using project channel.
	Data *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Indicates whether subscriptions will be used.
	IsSubscribe bool `protobuf:"varint,5,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// The topic list to subscription.
	Subscriptions []string `protobuf:"bytes,6,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Indicates whether schedule will be used.
	IsScheduled bool `protobuf:"varint,7,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// Schedule for which you want to receive notifications through the project channel.
	Schedule *ProjectChannelSchedule `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Set the level of notification.
	NotificationLevel NotificationLevel `protobuf:"varint,9,opt,name=notification_level,json=notificationLevel,proto3,enum=spaceone.api.notification.v1.NotificationLevel" json:"notification_level,omitempty"`
	// The tags for project channel.
	Tags *_struct.Struct `protobuf:"bytes,10,opt,name=tags,proto3" json:"tags,omitempty"`
	// The ID of domain.
	DomainId string `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// The ID of workspace
	WorkspaceId string `protobuf:"bytes,22,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	// The ID of project to which the project channel belongs.
	ProjectId string `protobuf:"bytes,23,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The ID of protocol set in the project channel.
	ProtocolId string `protobuf:"bytes,24,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The ID of secret encrypted data in the security service
	SecretId string `protobuf:"bytes,25,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	// Project channel creation time.
	CreatedAt     string `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectChannelInfo) Reset() {
	*x = ProjectChannelInfo{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectChannelInfo) ProtoMessage() {}

func (x *ProjectChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectChannelInfo.ProtoReflect.Descriptor instead.
func (*ProjectChannelInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{7}
}

func (x *ProjectChannelInfo) GetProjectChannelId() string {
	if x != nil {
		return x.ProjectChannelId
	}
	return ""
}

func (x *ProjectChannelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectChannelInfo) GetState() ProjectChannelInfo_ProjectChannelState {
	if x != nil {
		return x.State
	}
	return ProjectChannelInfo_NONE
}

func (x *ProjectChannelInfo) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProjectChannelInfo) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *ProjectChannelInfo) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *ProjectChannelInfo) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *ProjectChannelInfo) GetSchedule() *ProjectChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *ProjectChannelInfo) GetNotificationLevel() NotificationLevel {
	if x != nil {
		return x.NotificationLevel
	}
	return NotificationLevel_NONE
}

func (x *ProjectChannelInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProjectChannelInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *ProjectChannelInfo) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ProjectChannelInfo) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ProjectChannelInfo) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *ProjectChannelInfo) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *ProjectChannelInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	   "results": [
//	       {
//	           "project_channel_id": "project-ch-473efcfde4b1",
//	           "name": "Email Groups",
//	           "state": "ENABLED",
//	           "data": {
//	               "email": "sykim1@cloudforet.io, sykim2@cloudforet.io"
//	           },
//	           "notification_level": "LV1",
//	           "tags": {},
//	           "protocol_id": "protocol-e000a677ebdb",
//	           "project_id": "project-28cf4f2e6645",
//	           "domain_id": "domain-58010aa2e451",
//	           "created_at": "2022-04-18T01:22:01.182Z"
//	       },
//	       {
//	           "project_channel_id": "project-ch-98845ba0f975",
//	           "name": "Song Email",
//	           "state": "ENABLED",
//	           "data": {
//	               "email": "sykim@mz.co.kr"
//	           },
//	           "notification_level": "LV1",
//	           "tags": {},
//	           "protocol_id": "protocol-e000a677ebdb",
//	           "project_id": "project-28cf4f2e6645",
//	           "domain_id": "domain-58010aa2e451",
//	           "created_at": "2022-04-18T01:17:40.741Z"
//	       }
//	   ],
//	   "total_count": 2
//	}
type ProjectChannelsInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of queried project channels.
	Results []*ProjectChannelInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Total counts of queried project channels.
	TotalCount    int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectChannelsInfo) Reset() {
	*x = ProjectChannelsInfo{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectChannelsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectChannelsInfo) ProtoMessage() {}

func (x *ProjectChannelsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectChannelsInfo.ProtoReflect.Descriptor instead.
func (*ProjectChannelsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{8}
}

func (x *ProjectChannelsInfo) GetResults() []*ProjectChannelInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ProjectChannelsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ProjectChannelStatQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Statistics Query format provided by SpaceONE. Please check the link for more information.
	Query         *v2.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectChannelStatQuery) Reset() {
	*x = ProjectChannelStatQuery{}
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectChannelStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectChannelStatQuery) ProtoMessage() {}

func (x *ProjectChannelStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_project_channel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectChannelStatQuery.ProtoReflect.Descriptor instead.
func (*ProjectChannelStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP(), []int{9}
}

func (x *ProjectChannelStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_notification_v1_project_channel_proto protoreflect.FileDescriptor

const file_spaceone_api_notification_v1_project_channel_proto_rawDesc = "" +
	"\n" +
	"2spaceone/api/notification/v1/project_channel.proto\x12\x1cspaceone.api.notification.v1\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1cgoogle/api/annotations.proto\x1a spaceone/api/core/v2/query.proto\"\x88\x02\n" +
	"\x16ProjectChannelSchedule\x12^\n" +
	"\vday_of_week\x18\x01 \x03(\x0e2>.spaceone.api.notification.v1.ProjectChannelSchedule.DayOfWeekR\tdayOfWeek\x12\x1d\n" +
	"\n" +
	"start_hour\x18\x02 \x01(\x05R\tstartHour\x12\x19\n" +
	"\bend_hour\x18\x03 \x01(\x05R\aendHour\"T\n" +
	"\tDayOfWeek\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03MON\x10\x01\x12\a\n" +
	"\x03TUE\x10\x02\x12\a\n" +
	"\x03WED\x10\x03\x12\a\n" +
	"\x03THU\x10\x04\x12\a\n" +
	"\x03FRI\x10\x05\x12\a\n" +
	"\x03SAT\x10\x06\x12\a\n" +
	"\x03SUN\x10\a\"\xe9\x03\n" +
	"\x1bCreateProjectChannelRequest\x12\x1f\n" +
	"\vprotocol_id\x18\x01 \x01(\tR\n" +
	"protocolId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x04data\x12!\n" +
	"\fis_subscribe\x18\x04 \x01(\bR\visSubscribe\x12$\n" +
	"\rsubscriptions\x18\x05 \x03(\tR\rsubscriptions\x12^\n" +
	"\x12notification_level\x18\x06 \x01(\x0e2/.spaceone.api.notification.v1.NotificationLevelR\x11notificationLevel\x12!\n" +
	"\fis_scheduled\x18\a \x01(\bR\visScheduled\x12P\n" +
	"\bschedule\x18\b \x01(\v24.spaceone.api.notification.v1.ProjectChannelScheduleR\bschedule\x12+\n" +
	"\x04tags\x18\t \x01(\v2\x17.google.protobuf.StructR\x04tags\x12\x1d\n" +
	"\n" +
	"project_id\x18\x15 \x01(\tR\tprojectId\"\xb6\x02\n" +
	"\x1bUpdateProjectChannelRequest\x12,\n" +
	"\x12project_channel_id\x18\x01 \x01(\tR\x10projectChannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x04data\x12^\n" +
	"\x12notification_level\x18\x05 \x01(\x0e2/.spaceone.api.notification.v1.NotificationLevelR\x11notificationLevel\x12+\n" +
	"\x04tags\x18\a \x01(\v2\x17.google.protobuf.StructR\x04tags\x12\x1b\n" +
	"\tdomain_id\x18\x15 \x01(\tR\bdomainId\"\xc8\x01\n" +
	"#UpdateProjectChannelScheduleRequest\x12,\n" +
	"\x12project_channel_id\x18\x01 \x01(\tR\x10projectChannelId\x12!\n" +
	"\fis_scheduled\x18\x02 \x01(\bR\visScheduled\x12P\n" +
	"\bschedule\x18\x03 \x01(\v24.spaceone.api.notification.v1.ProjectChannelScheduleR\bschedule\"\xa0\x01\n" +
	"'UpdateProjectChannelSubscriptionRequest\x12,\n" +
	"\x12project_channel_id\x18\x01 \x01(\tR\x10projectChannelId\x12!\n" +
	"\fis_subscribe\x18\x02 \x01(\bR\visSubscribe\x12$\n" +
	"\rsubscriptions\x18\x03 \x03(\tR\rsubscriptions\"E\n" +
	"\x15ProjectChannelRequest\x12,\n" +
	"\x12project_channel_id\x18\x01 \x01(\tR\x10projectChannelId\"\xa6\x04\n" +
	"\x13ProjectChannelQuery\x121\n" +
	"\x05query\x18\x01 \x01(\v2\x1b.spaceone.api.core.v2.QueryR\x05query\x12,\n" +
	"\x12project_channel_id\x18\x02 \x01(\tR\x10projectChannelId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12[\n" +
	"\x05state\x18\x04 \x01(\x0e2E.spaceone.api.notification.v1.ProjectChannelQuery.ProjectChannelStateR\x05state\x12!\n" +
	"\fis_subscribe\x18\x05 \x01(\bR\visSubscribe\x12!\n" +
	"\fis_scheduled\x18\x06 \x01(\bR\visScheduled\x12^\n" +
	"\x12notification_level\x18\a \x01(\x0e2/.spaceone.api.notification.v1.NotificationLevelR\x11notificationLevel\x12\x1d\n" +
	"\n" +
	"project_id\x18\x15 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vprotocol_id\x18\x16 \x01(\tR\n" +
	"protocolId\x12\x1b\n" +
	"\tsecret_id\x18\x17 \x01(\tR\bsecretId\":\n" +
	"\x13ProjectChannelState\x12\b\n" +
	"\x04NONE\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x02\"\xa2\x06\n" +
	"\x12ProjectChannelInfo\x12,\n" +
	"\x12project_channel_id\x18\x01 \x01(\tR\x10projectChannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12Z\n" +
	"\x05state\x18\x03 \x01(\x0e2D.spaceone.api.notification.v1.ProjectChannelInfo.ProjectChannelStateR\x05state\x12+\n" +
	"\x04data\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04data\x12!\n" +
	"\fis_subscribe\x18\x05 \x01(\bR\visSubscribe\x12$\n" +
	"\rsubscriptions\x18\x06 \x03(\tR\rsubscriptions\x12!\n" +
	"\fis_scheduled\x18\a \x01(\bR\visScheduled\x12P\n" +
	"\bschedule\x18\b \x01(\v24.spaceone.api.notification.v1.ProjectChannelScheduleR\bschedule\x12^\n" +
	"\x12notification_level\x18\t \x01(\x0e2/.spaceone.api.notification.v1.NotificationLevelR\x11notificationLevel\x12+\n" +
	"\x04tags\x18\n" +
	" \x01(\v2\x17.google.protobuf.StructR\x04tags\x12\x1b\n" +
	"\tdomain_id\x18\x15 \x01(\tR\bdomainId\x12!\n" +
	"\fworkspace_id\x18\x16 \x01(\tR\vworkspaceId\x12\x1d\n" +
	"\n" +
	"project_id\x18\x17 \x01(\tR\tprojectId\x12\x1f\n" +
	"\vprotocol_id\x18\x18 \x01(\tR\n" +
	"protocolId\x12\x1b\n" +
	"\tsecret_id\x18\x19 \x01(\tR\bsecretId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x1f \x01(\tR\tcreatedAt\":\n" +
	"\x13ProjectChannelState\x12\b\n" +
	"\x04NONE\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x02\"\x82\x01\n" +
	"\x13ProjectChannelsInfo\x12J\n" +
	"\aresults\x18\x01 \x03(\v20.spaceone.api.notification.v1.ProjectChannelInfoR\aresults\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\"V\n" +
	"\x17ProjectChannelStatQuery\x12;\n" +
	"\x05query\x18\x01 \x01(\v2%.spaceone.api.core.v2.StatisticsQueryR\x05query*J\n" +
	"\x11NotificationLevel\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03LV1\x10\x01\x12\a\n" +
	"\x03LV2\x10\x02\x12\a\n" +
	"\x03LV3\x10\x03\x12\a\n" +
	"\x03LV4\x10\x04\x12\a\n" +
	"\x03LV5\x10\x052\x9a\r\n" +
	"\x0eProjectChannel\x12\xa9\x01\n" +
	"\x06create\x129.spaceone.api.notification.v1.CreateProjectChannelRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"2\x82\xd3\xe4\x93\x02,:\x01*\"'/notification/v1/project-channel/create\x12\xa9\x01\n" +
	"\x06update\x129.spaceone.api.notification.v1.UpdateProjectChannelRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"2\x82\xd3\xe4\x93\x02,:\x01*\"'/notification/v1/project-channel/update\x12\xbd\x01\n" +
	"\fset_schedule\x12A.spaceone.api.notification.v1.UpdateProjectChannelScheduleRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"8\x82\xd3\xe4\x93\x022:\x01*\"-/notification/v1/project-channel/set-schedule\x12\xc9\x01\n" +
	"\x10set_subscription\x12E.spaceone.api.notification.v1.UpdateProjectChannelSubscriptionRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"<\x82\xd3\xe4\x93\x026:\x01*\"1/notification/v1/project-channel/set-subscription\x12\xa3\x01\n" +
	"\x06enable\x123.spaceone.api.notification.v1.ProjectChannelRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"2\x82\xd3\xe4\x93\x02,:\x01*\"'/notification/v1/project-channel/enable\x12\xa5\x01\n" +
	"\adisable\x123.spaceone.api.notification.v1.ProjectChannelRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"3\x82\xd3\xe4\x93\x02-:\x01*\"(/notification/v1/project-channel/disable\x12\x89\x01\n" +
	"\x06delete\x123.spaceone.api.notification.v1.ProjectChannelRequest\x1a\x16.google.protobuf.Empty\"2\x82\xd3\xe4\x93\x02,:\x01*\"'/notification/v1/project-channel/delete\x12\x9d\x01\n" +
	"\x03get\x123.spaceone.api.notification.v1.ProjectChannelRequest\x1a0.spaceone.api.notification.v1.ProjectChannelInfo\"/\x82\xd3\xe4\x93\x02):\x01*\"$/notification/v1/project-channel/get\x12\x9e\x01\n" +
	"\x04list\x121.spaceone.api.notification.v1.ProjectChannelQuery\x1a1.spaceone.api.notification.v1.ProjectChannelsInfo\"0\x82\xd3\xe4\x93\x02*:\x01*\"%/notification/v1/project-channel/list\x12\x88\x01\n" +
	"\x04stat\x125.spaceone.api.notification.v1.ProjectChannelStatQuery\x1a\x17.google.protobuf.Struct\"0\x82\xd3\xe4\x93\x02*:\x01*\"%/notification/v1/project-channel/statBCZAgithub.com/cloudforet-io/api/dist/go/spaceone/api/notification/v1b\x06proto3"

var (
	file_spaceone_api_notification_v1_project_channel_proto_rawDescOnce sync.Once
	file_spaceone_api_notification_v1_project_channel_proto_rawDescData []byte
)

func file_spaceone_api_notification_v1_project_channel_proto_rawDescGZIP() []byte {
	file_spaceone_api_notification_v1_project_channel_proto_rawDescOnce.Do(func() {
		file_spaceone_api_notification_v1_project_channel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spaceone_api_notification_v1_project_channel_proto_rawDesc), len(file_spaceone_api_notification_v1_project_channel_proto_rawDesc)))
	})
	return file_spaceone_api_notification_v1_project_channel_proto_rawDescData
}

var file_spaceone_api_notification_v1_project_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_spaceone_api_notification_v1_project_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_spaceone_api_notification_v1_project_channel_proto_goTypes = []any{
	(NotificationLevel)(0),                          // 0: spaceone.api.notification.v1.NotificationLevel
	(ProjectChannelSchedule_DayOfWeek)(0),           // 1: spaceone.api.notification.v1.ProjectChannelSchedule.DayOfWeek
	(ProjectChannelQuery_ProjectChannelState)(0),    // 2: spaceone.api.notification.v1.ProjectChannelQuery.ProjectChannelState
	(ProjectChannelInfo_ProjectChannelState)(0),     // 3: spaceone.api.notification.v1.ProjectChannelInfo.ProjectChannelState
	(*ProjectChannelSchedule)(nil),                  // 4: spaceone.api.notification.v1.ProjectChannelSchedule
	(*CreateProjectChannelRequest)(nil),             // 5: spaceone.api.notification.v1.CreateProjectChannelRequest
	(*UpdateProjectChannelRequest)(nil),             // 6: spaceone.api.notification.v1.UpdateProjectChannelRequest
	(*UpdateProjectChannelScheduleRequest)(nil),     // 7: spaceone.api.notification.v1.UpdateProjectChannelScheduleRequest
	(*UpdateProjectChannelSubscriptionRequest)(nil), // 8: spaceone.api.notification.v1.UpdateProjectChannelSubscriptionRequest
	(*ProjectChannelRequest)(nil),                   // 9: spaceone.api.notification.v1.ProjectChannelRequest
	(*ProjectChannelQuery)(nil),                     // 10: spaceone.api.notification.v1.ProjectChannelQuery
	(*ProjectChannelInfo)(nil),                      // 11: spaceone.api.notification.v1.ProjectChannelInfo
	(*ProjectChannelsInfo)(nil),                     // 12: spaceone.api.notification.v1.ProjectChannelsInfo
	(*ProjectChannelStatQuery)(nil),                 // 13: spaceone.api.notification.v1.ProjectChannelStatQuery
	(*_struct.Struct)(nil),                          // 14: google.protobuf.Struct
	(*v2.Query)(nil),                                // 15: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),                      // 16: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                             // 17: google.protobuf.Empty
}
var file_spaceone_api_notification_v1_project_channel_proto_depIdxs = []int32{
	1,  // 0: spaceone.api.notification.v1.ProjectChannelSchedule.day_of_week:type_name -> spaceone.api.notification.v1.ProjectChannelSchedule.DayOfWeek
	14, // 1: spaceone.api.notification.v1.CreateProjectChannelRequest.data:type_name -> google.protobuf.Struct
	0,  // 2: spaceone.api.notification.v1.CreateProjectChannelRequest.notification_level:type_name -> spaceone.api.notification.v1.NotificationLevel
	4,  // 3: spaceone.api.notification.v1.CreateProjectChannelRequest.schedule:type_name -> spaceone.api.notification.v1.ProjectChannelSchedule
	14, // 4: spaceone.api.notification.v1.CreateProjectChannelRequest.tags:type_name -> google.protobuf.Struct
	14, // 5: spaceone.api.notification.v1.UpdateProjectChannelRequest.data:type_name -> google.protobuf.Struct
	0,  // 6: spaceone.api.notification.v1.UpdateProjectChannelRequest.notification_level:type_name -> spaceone.api.notification.v1.NotificationLevel
	14, // 7: spaceone.api.notification.v1.UpdateProjectChannelRequest.tags:type_name -> google.protobuf.Struct
	4,  // 8: spaceone.api.notification.v1.UpdateProjectChannelScheduleRequest.schedule:type_name -> spaceone.api.notification.v1.ProjectChannelSchedule
	15, // 9: spaceone.api.notification.v1.ProjectChannelQuery.query:type_name -> spaceone.api.core.v2.Query
	2,  // 10: spaceone.api.notification.v1.ProjectChannelQuery.state:type_name -> spaceone.api.notification.v1.ProjectChannelQuery.ProjectChannelState
	0,  // 11: spaceone.api.notification.v1.ProjectChannelQuery.notification_level:type_name -> spaceone.api.notification.v1.NotificationLevel
	3,  // 12: spaceone.api.notification.v1.ProjectChannelInfo.state:type_name -> spaceone.api.notification.v1.ProjectChannelInfo.ProjectChannelState
	14, // 13: spaceone.api.notification.v1.ProjectChannelInfo.data:type_name -> google.protobuf.Struct
	4,  // 14: spaceone.api.notification.v1.ProjectChannelInfo.schedule:type_name -> spaceone.api.notification.v1.ProjectChannelSchedule
	0,  // 15: spaceone.api.notification.v1.ProjectChannelInfo.notification_level:type_name -> spaceone.api.notification.v1.NotificationLevel
	14, // 16: spaceone.api.notification.v1.ProjectChannelInfo.tags:type_name -> google.protobuf.Struct
	11, // 17: spaceone.api.notification.v1.ProjectChannelsInfo.results:type_name -> spaceone.api.notification.v1.ProjectChannelInfo
	16, // 18: spaceone.api.notification.v1.ProjectChannelStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	5,  // 19: spaceone.api.notification.v1.ProjectChannel.create:input_type -> spaceone.api.notification.v1.CreateProjectChannelRequest
	6,  // 20: spaceone.api.notification.v1.ProjectChannel.update:input_type -> spaceone.api.notification.v1.UpdateProjectChannelRequest
	7,  // 21: spaceone.api.notification.v1.ProjectChannel.set_schedule:input_type -> spaceone.api.notification.v1.UpdateProjectChannelScheduleRequest
	8,  // 22: spaceone.api.notification.v1.ProjectChannel.set_subscription:input_type -> spaceone.api.notification.v1.UpdateProjectChannelSubscriptionRequest
	9,  // 23: spaceone.api.notification.v1.ProjectChannel.enable:input_type -> spaceone.api.notification.v1.ProjectChannelRequest
	9,  // 24: spaceone.api.notification.v1.ProjectChannel.disable:input_type -> spaceone.api.notification.v1.ProjectChannelRequest
	9,  // 25: spaceone.api.notification.v1.ProjectChannel.delete:input_type -> spaceone.api.notification.v1.ProjectChannelRequest
	9,  // 26: spaceone.api.notification.v1.ProjectChannel.get:input_type -> spaceone.api.notification.v1.ProjectChannelRequest
	10, // 27: spaceone.api.notification.v1.ProjectChannel.list:input_type -> spaceone.api.notification.v1.ProjectChannelQuery
	13, // 28: spaceone.api.notification.v1.ProjectChannel.stat:input_type -> spaceone.api.notification.v1.ProjectChannelStatQuery
	11, // 29: spaceone.api.notification.v1.ProjectChannel.create:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	11, // 30: spaceone.api.notification.v1.ProjectChannel.update:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	11, // 31: spaceone.api.notification.v1.ProjectChannel.set_schedule:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	11, // 32: spaceone.api.notification.v1.ProjectChannel.set_subscription:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	11, // 33: spaceone.api.notification.v1.ProjectChannel.enable:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	11, // 34: spaceone.api.notification.v1.ProjectChannel.disable:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	17, // 35: spaceone.api.notification.v1.ProjectChannel.delete:output_type -> google.protobuf.Empty
	11, // 36: spaceone.api.notification.v1.ProjectChannel.get:output_type -> spaceone.api.notification.v1.ProjectChannelInfo
	12, // 37: spaceone.api.notification.v1.ProjectChannel.list:output_type -> spaceone.api.notification.v1.ProjectChannelsInfo
	14, // 38: spaceone.api.notification.v1.ProjectChannel.stat:output_type -> google.protobuf.Struct
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_spaceone_api_notification_v1_project_channel_proto_init() }
func file_spaceone_api_notification_v1_project_channel_proto_init() {
	if File_spaceone_api_notification_v1_project_channel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spaceone_api_notification_v1_project_channel_proto_rawDesc), len(file_spaceone_api_notification_v1_project_channel_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_notification_v1_project_channel_proto_goTypes,
		DependencyIndexes: file_spaceone_api_notification_v1_project_channel_proto_depIdxs,
		EnumInfos:         file_spaceone_api_notification_v1_project_channel_proto_enumTypes,
		MessageInfos:      file_spaceone_api_notification_v1_project_channel_proto_msgTypes,
	}.Build()
	File_spaceone_api_notification_v1_project_channel_proto = out.File
	file_spaceone_api_notification_v1_project_channel_proto_goTypes = nil
	file_spaceone_api_notification_v1_project_channel_proto_depIdxs = nil
}
