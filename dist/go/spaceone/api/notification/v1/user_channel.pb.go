// A UserChannel is a destination where Notifications are delivered. Notifications are generated via the Protocol set by each User.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: spaceone/api/notification/v1/user_channel.proto

package v1

import (
	v2 "github.com/cloudforet-io/api/dist/go/spaceone/api/core/v2"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserChannelSchedule_DayOfWeek int32

const (
	UserChannelSchedule_NONE UserChannelSchedule_DayOfWeek = 0
	UserChannelSchedule_MON  UserChannelSchedule_DayOfWeek = 1
	UserChannelSchedule_TUE  UserChannelSchedule_DayOfWeek = 2
	UserChannelSchedule_WED  UserChannelSchedule_DayOfWeek = 3
	UserChannelSchedule_THU  UserChannelSchedule_DayOfWeek = 4
	UserChannelSchedule_FRI  UserChannelSchedule_DayOfWeek = 5
	UserChannelSchedule_SAT  UserChannelSchedule_DayOfWeek = 6
	UserChannelSchedule_SUN  UserChannelSchedule_DayOfWeek = 7
)

// Enum value maps for UserChannelSchedule_DayOfWeek.
var (
	UserChannelSchedule_DayOfWeek_name = map[int32]string{
		0: "NONE",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	UserChannelSchedule_DayOfWeek_value = map[string]int32{
		"NONE": 0,
		"MON":  1,
		"TUE":  2,
		"WED":  3,
		"THU":  4,
		"FRI":  5,
		"SAT":  6,
		"SUN":  7,
	}
)

func (x UserChannelSchedule_DayOfWeek) Enum() *UserChannelSchedule_DayOfWeek {
	p := new(UserChannelSchedule_DayOfWeek)
	*p = x
	return p
}

func (x UserChannelSchedule_DayOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserChannelSchedule_DayOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_user_channel_proto_enumTypes[0].Descriptor()
}

func (UserChannelSchedule_DayOfWeek) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_user_channel_proto_enumTypes[0]
}

func (x UserChannelSchedule_DayOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserChannelSchedule_DayOfWeek.Descriptor instead.
func (UserChannelSchedule_DayOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{0, 0}
}

type UserChannelQuery_UserChannelState int32

const (
	UserChannelQuery_NONE     UserChannelQuery_UserChannelState = 0
	UserChannelQuery_ENABLED  UserChannelQuery_UserChannelState = 1
	UserChannelQuery_DISABLED UserChannelQuery_UserChannelState = 2
)

// Enum value maps for UserChannelQuery_UserChannelState.
var (
	UserChannelQuery_UserChannelState_name = map[int32]string{
		0: "NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	UserChannelQuery_UserChannelState_value = map[string]int32{
		"NONE":     0,
		"ENABLED":  1,
		"DISABLED": 2,
	}
)

func (x UserChannelQuery_UserChannelState) Enum() *UserChannelQuery_UserChannelState {
	p := new(UserChannelQuery_UserChannelState)
	*p = x
	return p
}

func (x UserChannelQuery_UserChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserChannelQuery_UserChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_user_channel_proto_enumTypes[1].Descriptor()
}

func (UserChannelQuery_UserChannelState) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_user_channel_proto_enumTypes[1]
}

func (x UserChannelQuery_UserChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserChannelQuery_UserChannelState.Descriptor instead.
func (UserChannelQuery_UserChannelState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{6, 0}
}

type UserChannelInfo_UserChannelState int32

const (
	UserChannelInfo_NONE     UserChannelInfo_UserChannelState = 0
	UserChannelInfo_ENABLED  UserChannelInfo_UserChannelState = 1
	UserChannelInfo_DISABLED UserChannelInfo_UserChannelState = 2
)

// Enum value maps for UserChannelInfo_UserChannelState.
var (
	UserChannelInfo_UserChannelState_name = map[int32]string{
		0: "NONE",
		1: "ENABLED",
		2: "DISABLED",
	}
	UserChannelInfo_UserChannelState_value = map[string]int32{
		"NONE":     0,
		"ENABLED":  1,
		"DISABLED": 2,
	}
)

func (x UserChannelInfo_UserChannelState) Enum() *UserChannelInfo_UserChannelState {
	p := new(UserChannelInfo_UserChannelState)
	*p = x
	return p
}

func (x UserChannelInfo_UserChannelState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserChannelInfo_UserChannelState) Descriptor() protoreflect.EnumDescriptor {
	return file_spaceone_api_notification_v1_user_channel_proto_enumTypes[2].Descriptor()
}

func (UserChannelInfo_UserChannelState) Type() protoreflect.EnumType {
	return &file_spaceone_api_notification_v1_user_channel_proto_enumTypes[2]
}

func (x UserChannelInfo_UserChannelState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserChannelInfo_UserChannelState.Descriptor instead.
func (UserChannelInfo_UserChannelState) EnumDescriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{7, 0}
}

type UserChannelSchedule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Day of the week to be notified.
	// As a list type, only types that can be specified from MON to SUN can be set.
	DayOfWeek []UserChannelSchedule_DayOfWeek `protobuf:"varint,1,rep,packed,name=day_of_week,json=dayOfWeek,proto3,enum=spaceone.api.notification.v1.UserChannelSchedule_DayOfWeek" json:"day_of_week,omitempty"`
	// Start time to receive notifications.
	// Only integer type can be set, and 0 to 23 can be.
	StartHour int32 `protobuf:"varint,2,opt,name=start_hour,json=startHour,proto3" json:"start_hour,omitempty"`
	// End time to receive notifications.
	// Only integer type can be set, and 1 to 24 can be.
	EndHour       int32 `protobuf:"varint,3,opt,name=end_hour,json=endHour,proto3" json:"end_hour,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChannelSchedule) Reset() {
	*x = UserChannelSchedule{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChannelSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelSchedule) ProtoMessage() {}

func (x *UserChannelSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelSchedule.ProtoReflect.Descriptor instead.
func (*UserChannelSchedule) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{0}
}

func (x *UserChannelSchedule) GetDayOfWeek() []UserChannelSchedule_DayOfWeek {
	if x != nil {
		return x.DayOfWeek
	}
	return nil
}

func (x *UserChannelSchedule) GetStartHour() int32 {
	if x != nil {
		return x.StartHour
	}
	return 0
}

func (x *UserChannelSchedule) GetEndHour() int32 {
	if x != nil {
		return x.EndHour
	}
	return 0
}

//	{
//	   "protocol_id": "protocol-123456789012",
//	   "name": "Email",
//	   "data": {
//	       "email": "user1@email.com"
//	   },
//	}
type CreateUserChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of protocol that will be set in user channel.
	ProtocolId string `protobuf:"bytes,1,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The name of User Channel. It can have a maximum of 255 characters.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The data for using user channel.
	// This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
	// In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
	// if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
	Data *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Indicates whether subscriptions will be used.
	// +optional
	IsSubscribe bool `protobuf:"varint,4,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// When using subscriptions, it indicates the topic list to subscription.
	// If is_subscribe is set to false, this value is ignored.
	// +optional
	Subscriptions []string `protobuf:"bytes,5,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Indicates whether schedule will be used.
	// +optional
	IsScheduled bool `protobuf:"varint,6,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// Schedule for which you want to receive notifications through the user channel.
	// +optional
	Schedule *UserChannelSchedule `protobuf:"bytes,7,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The tags for user channel.
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserChannelRequest) Reset() {
	*x = CreateUserChannelRequest{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserChannelRequest) ProtoMessage() {}

func (x *CreateUserChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateUserChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{1}
}

func (x *CreateUserChannelRequest) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *CreateUserChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateUserChannelRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CreateUserChannelRequest) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *CreateUserChannelRequest) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *CreateUserChannelRequest) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *CreateUserChannelRequest) GetSchedule() *UserChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *CreateUserChannelRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

//	{
//	   "user_channel_id": "user-ch-123456789012",
//	   "name": "Email2",
//	   "data": {
//	       "email": "user1@gmail.com"
//	   },
//	   "tags": {
//	       "type": "test"
//	   }
//	}
type UpdateUserChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of user channel.
	UserChannelId string `protobuf:"bytes,1,opt,name=user_channel_id,json=userChannelId,proto3" json:"user_channel_id,omitempty"`
	// The name of user channel. It can have a maximum of 255 characters.
	// +optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The data for using user channel.
	// This data is encrypted and stored in the Secret service if JSON schema in the protocol's metadata is set to SECRET type.
	// In this case, the secret ID that is stored in the security service will be returned and the data value will be empty.
	// if JSON schema in the protocol's metadata is set to PLAIN_TEXT type, This data is not encrypted and stored directly in the DB.
	// +optional
	Data *_struct.Struct `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Set the level of notification.
	// If a notification has a level and a notification level that this channel can receive is set, a notification is dispatched only if the notification level is the same.
	// +optional
	Schedule *UserChannelSchedule `protobuf:"bytes,4,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The tags for user channel.
	// +optional
	Tags          *_struct.Struct `protobuf:"bytes,5,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserChannelRequest) Reset() {
	*x = UpdateUserChannelRequest{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserChannelRequest) ProtoMessage() {}

func (x *UpdateUserChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateUserChannelRequest) GetUserChannelId() string {
	if x != nil {
		return x.UserChannelId
	}
	return ""
}

func (x *UpdateUserChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateUserChannelRequest) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UpdateUserChannelRequest) GetSchedule() *UserChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *UpdateUserChannelRequest) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

//	{
//	   "user_channel_id": "user-ch-28097e8d5d59",
//	   "is_scheduled": true,
//	   "schedule": {
//	       "day_of_week": [
//	           "MON",
//	           "TUE",
//	           "WED",
//	           "THU",
//	           "FRI"
//	       ],
//	       "end_hour": 9
//	   },
//	}
type UpdateUserChannelScheduleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of user channel.
	UserChannelId string `protobuf:"bytes,1,opt,name=user_channel_id,json=userChannelId,proto3" json:"user_channel_id,omitempty"`
	// Indicates whether schedule will be used.
	IsScheduled bool `protobuf:"varint,2,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// Schedule for which you want to receive notifications through the user channel.
	// +optional
	Schedule      *UserChannelSchedule `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserChannelScheduleRequest) Reset() {
	*x = UpdateUserChannelScheduleRequest{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserChannelScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserChannelScheduleRequest) ProtoMessage() {}

func (x *UpdateUserChannelScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserChannelScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserChannelScheduleRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserChannelScheduleRequest) GetUserChannelId() string {
	if x != nil {
		return x.UserChannelId
	}
	return ""
}

func (x *UpdateUserChannelScheduleRequest) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *UpdateUserChannelScheduleRequest) GetSchedule() *UserChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

//	{
//	   "user_channel_id": "user-ch-28097e8d5d59",
//	   "is_subscribe": true,
//	   "subscriptions": [
//	       "monitoring.Alert"
//	   ],
//	}
type UpdateUserChannelSubscriptionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of user channel.
	UserChannelId string `protobuf:"bytes,1,opt,name=user_channel_id,json=userChannelId,proto3" json:"user_channel_id,omitempty"`
	// Indicates whether subscriptions will be used.
	IsSubscribe bool `protobuf:"varint,2,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// If is_subscribe is set to false, this value is ignored.
	// +optional
	Subscriptions []string `protobuf:"bytes,3,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserChannelSubscriptionRequest) Reset() {
	*x = UpdateUserChannelSubscriptionRequest{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserChannelSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserChannelSubscriptionRequest) ProtoMessage() {}

func (x *UpdateUserChannelSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserChannelSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserChannelSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserChannelSubscriptionRequest) GetUserChannelId() string {
	if x != nil {
		return x.UserChannelId
	}
	return ""
}

func (x *UpdateUserChannelSubscriptionRequest) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *UpdateUserChannelSubscriptionRequest) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

//	{
//	   "user_channel_id": "user-ch-123456789012"
//	}
type UserChannelRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of user channel.
	UserChannelId string `protobuf:"bytes,1,opt,name=user_channel_id,json=userChannelId,proto3" json:"user_channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChannelRequest) Reset() {
	*x = UserChannelRequest{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelRequest) ProtoMessage() {}

func (x *UserChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelRequest.ProtoReflect.Descriptor instead.
func (*UserChannelRequest) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{5}
}

func (x *UserChannelRequest) GetUserChannelId() string {
	if x != nil {
		return x.UserChannelId
	}
	return ""
}

//	{
//	   "query": {}
//	}
type UserChannelQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Query format provided by SpaceONE. Please check the link for more information.
	// +optional
	Query *v2.Query `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// The ID of user channel.
	// +optional
	UserChannelId string `protobuf:"bytes,2,opt,name=user_channel_id,json=userChannelId,proto3" json:"user_channel_id,omitempty"`
	// The name of user channel. It can have a maximum of 255 characters.
	// +optional
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The state of user channel. ENABLED or DISABLED only.
	// +optional
	State UserChannelQuery_UserChannelState `protobuf:"varint,4,opt,name=state,proto3,enum=spaceone.api.notification.v1.UserChannelQuery_UserChannelState" json:"state,omitempty"`
	// Indicates whether subscriptions will be used.
	// +optional
	IsSubscribe bool `protobuf:"varint,5,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// Indicates whether schedule will be used.
	// +optional
	IsScheduled bool `protobuf:"varint,6,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// The ID of protocol set in the user channel.
	// +optional
	ProtocolId string `protobuf:"bytes,21,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The ID of secret encrypted data in the security service
	// +optional
	UserSecretId  string `protobuf:"bytes,22,opt,name=user_secret_id,json=userSecretId,proto3" json:"user_secret_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChannelQuery) Reset() {
	*x = UserChannelQuery{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChannelQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelQuery) ProtoMessage() {}

func (x *UserChannelQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelQuery.ProtoReflect.Descriptor instead.
func (*UserChannelQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{6}
}

func (x *UserChannelQuery) GetQuery() *v2.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UserChannelQuery) GetUserChannelId() string {
	if x != nil {
		return x.UserChannelId
	}
	return ""
}

func (x *UserChannelQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserChannelQuery) GetState() UserChannelQuery_UserChannelState {
	if x != nil {
		return x.State
	}
	return UserChannelQuery_NONE
}

func (x *UserChannelQuery) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *UserChannelQuery) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *UserChannelQuery) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *UserChannelQuery) GetUserSecretId() string {
	if x != nil {
		return x.UserSecretId
	}
	return ""
}

//	{
//	   "user_channel_id": "user-ch-123456789012",
//	   "name": "Email",
//	   "state": "ENABLED",
//	   "data": {
//	       "email": "user1@email.com"
//	   },
//	   "protocol_id": "protocol-123456789012",
//	   "user_id": "user1@email.com",
//	   "domain_id": "domain-123456789012",
//	   "created_at": "2022-01-01T08:28:49.108Z"
//	}
type UserChannelInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The ID of user channel.
	UserChannelId string `protobuf:"bytes,1,opt,name=user_channel_id,json=userChannelId,proto3" json:"user_channel_id,omitempty"`
	// The name of user channel
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The state of user channel. ENABLED or DISABLED only.
	State UserChannelInfo_UserChannelState `protobuf:"varint,3,opt,name=state,proto3,enum=spaceone.api.notification.v1.UserChannelInfo_UserChannelState" json:"state,omitempty"`
	// The data for using user channel.
	Data *_struct.Struct `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Indicates whether subscriptions will be used.
	IsSubscribe bool `protobuf:"varint,5,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`
	// The topic list to subscription.
	Subscriptions []string `protobuf:"bytes,6,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	// Indicates whether schedule will be used.
	IsScheduled bool `protobuf:"varint,7,opt,name=is_scheduled,json=isScheduled,proto3" json:"is_scheduled,omitempty"`
	// Schedule for which you want to receive notifications through the user channel.
	Schedule *UserChannelSchedule `protobuf:"bytes,8,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The tags for user channel.
	Tags *_struct.Struct `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	// The ID of domain.
	DomainId string `protobuf:"bytes,21,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	// The ID of user using the user channel.
	UserId string `protobuf:"bytes,22,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The ID of protocol set in the user channel.
	ProtocolId string `protobuf:"bytes,23,opt,name=protocol_id,json=protocolId,proto3" json:"protocol_id,omitempty"`
	// The ID of secret encrypted data in the security service
	UserSecretId string `protobuf:"bytes,24,opt,name=user_secret_id,json=userSecretId,proto3" json:"user_secret_id,omitempty"`
	// User channel creation time.
	CreatedAt     string `protobuf:"bytes,31,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChannelInfo) Reset() {
	*x = UserChannelInfo{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelInfo) ProtoMessage() {}

func (x *UserChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelInfo.ProtoReflect.Descriptor instead.
func (*UserChannelInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{7}
}

func (x *UserChannelInfo) GetUserChannelId() string {
	if x != nil {
		return x.UserChannelId
	}
	return ""
}

func (x *UserChannelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserChannelInfo) GetState() UserChannelInfo_UserChannelState {
	if x != nil {
		return x.State
	}
	return UserChannelInfo_NONE
}

func (x *UserChannelInfo) GetData() *_struct.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *UserChannelInfo) GetIsSubscribe() bool {
	if x != nil {
		return x.IsSubscribe
	}
	return false
}

func (x *UserChannelInfo) GetSubscriptions() []string {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *UserChannelInfo) GetIsScheduled() bool {
	if x != nil {
		return x.IsScheduled
	}
	return false
}

func (x *UserChannelInfo) GetSchedule() *UserChannelSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *UserChannelInfo) GetTags() *_struct.Struct {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserChannelInfo) GetDomainId() string {
	if x != nil {
		return x.DomainId
	}
	return ""
}

func (x *UserChannelInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserChannelInfo) GetProtocolId() string {
	if x != nil {
		return x.ProtocolId
	}
	return ""
}

func (x *UserChannelInfo) GetUserSecretId() string {
	if x != nil {
		return x.UserSecretId
	}
	return ""
}

func (x *UserChannelInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

//	{
//	   "results": [
//	       {
//	           "user_channel_id": "user-ch-123456789012",
//	           "name": "Email",
//	           "state": "ENABLED",
//	           "data": {
//	               "email": "user1@email.com"
//	           },
//	           "protocol_id": "protocol-123456789012",
//	           "user_id": "user1@email.com",
//	           "domain_id": "domain-123456789012",
//	           "created_at": "2022-01-01T08:28:49.108Z"
//	       },
//	       {
//	           "user_channel_id": "user-ch-98765432109",
//	           "name": "Email",
//	           "state": "ENABLED",
//	           "data": {
//	               "email": "user2@email.com"
//	           },
//	           "is_scheduled": true,
//	           "schedule": {
//	               "day_of_week": [
//	                   "MON",
//	                   "TUE",
//	                   "WED",
//	                   "THU",
//	                   "FRI"
//	               ],
//	               "start_hour": 3,
//	               "end_hour": 23
//	           },
//	           "protocol_id": "protocol-123456789012",
//	           "user_id": "user2@email.com",
//	           "domain_id": "domain-123456789012",
//	           "created_at": "2022-01-01T06:45:57.260Z"
//	       }
//	   ],
//	   "total_count": 2
//	}
type UserChannelsInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of queried user channels.
	Results []*UserChannelInfo `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// Total counts of queried user channels.
	TotalCount    int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChannelsInfo) Reset() {
	*x = UserChannelsInfo{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChannelsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelsInfo) ProtoMessage() {}

func (x *UserChannelsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelsInfo.ProtoReflect.Descriptor instead.
func (*UserChannelsInfo) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{8}
}

func (x *UserChannelsInfo) GetResults() []*UserChannelInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *UserChannelsInfo) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type UserChannelStatQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Statistics Query format provided by SpaceONE. Please check the link for more information.
	Query         *v2.StatisticsQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserChannelStatQuery) Reset() {
	*x = UserChannelStatQuery{}
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserChannelStatQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChannelStatQuery) ProtoMessage() {}

func (x *UserChannelStatQuery) ProtoReflect() protoreflect.Message {
	mi := &file_spaceone_api_notification_v1_user_channel_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChannelStatQuery.ProtoReflect.Descriptor instead.
func (*UserChannelStatQuery) Descriptor() ([]byte, []int) {
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP(), []int{9}
}

func (x *UserChannelStatQuery) GetQuery() *v2.StatisticsQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

var File_spaceone_api_notification_v1_user_channel_proto protoreflect.FileDescriptor

const file_spaceone_api_notification_v1_user_channel_proto_rawDesc = "" +
	"\n" +
	"/spaceone/api/notification/v1/user_channel.proto\x12\x1cspaceone.api.notification.v1\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1cgoogle/api/annotations.proto\x1a spaceone/api/core/v2/query.proto\"\x82\x02\n" +
	"\x13UserChannelSchedule\x12[\n" +
	"\vday_of_week\x18\x01 \x03(\x0e2;.spaceone.api.notification.v1.UserChannelSchedule.DayOfWeekR\tdayOfWeek\x12\x1d\n" +
	"\n" +
	"start_hour\x18\x02 \x01(\x05R\tstartHour\x12\x19\n" +
	"\bend_hour\x18\x03 \x01(\x05R\aendHour\"T\n" +
	"\tDayOfWeek\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03MON\x10\x01\x12\a\n" +
	"\x03TUE\x10\x02\x12\a\n" +
	"\x03WED\x10\x03\x12\a\n" +
	"\x03THU\x10\x04\x12\a\n" +
	"\x03FRI\x10\x05\x12\a\n" +
	"\x03SAT\x10\x06\x12\a\n" +
	"\x03SUN\x10\a\"\xe4\x02\n" +
	"\x18CreateUserChannelRequest\x12\x1f\n" +
	"\vprotocol_id\x18\x01 \x01(\tR\n" +
	"protocolId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x04data\x12!\n" +
	"\fis_subscribe\x18\x04 \x01(\bR\visSubscribe\x12$\n" +
	"\rsubscriptions\x18\x05 \x03(\tR\rsubscriptions\x12!\n" +
	"\fis_scheduled\x18\x06 \x01(\bR\visScheduled\x12M\n" +
	"\bschedule\x18\a \x01(\v21.spaceone.api.notification.v1.UserChannelScheduleR\bschedule\x12+\n" +
	"\x04tags\x18\b \x01(\v2\x17.google.protobuf.StructR\x04tags\"\xff\x01\n" +
	"\x18UpdateUserChannelRequest\x12&\n" +
	"\x0fuser_channel_id\x18\x01 \x01(\tR\ruserChannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.google.protobuf.StructR\x04data\x12M\n" +
	"\bschedule\x18\x04 \x01(\v21.spaceone.api.notification.v1.UserChannelScheduleR\bschedule\x12+\n" +
	"\x04tags\x18\x05 \x01(\v2\x17.google.protobuf.StructR\x04tags\"\xbc\x01\n" +
	" UpdateUserChannelScheduleRequest\x12&\n" +
	"\x0fuser_channel_id\x18\x01 \x01(\tR\ruserChannelId\x12!\n" +
	"\fis_scheduled\x18\x02 \x01(\bR\visScheduled\x12M\n" +
	"\bschedule\x18\x03 \x01(\v21.spaceone.api.notification.v1.UserChannelScheduleR\bschedule\"\x97\x01\n" +
	"$UpdateUserChannelSubscriptionRequest\x12&\n" +
	"\x0fuser_channel_id\x18\x01 \x01(\tR\ruserChannelId\x12!\n" +
	"\fis_subscribe\x18\x02 \x01(\bR\visSubscribe\x12$\n" +
	"\rsubscriptions\x18\x03 \x03(\tR\rsubscriptions\"<\n" +
	"\x12UserChannelRequest\x12&\n" +
	"\x0fuser_channel_id\x18\x01 \x01(\tR\ruserChannelId\"\x9e\x03\n" +
	"\x10UserChannelQuery\x121\n" +
	"\x05query\x18\x01 \x01(\v2\x1b.spaceone.api.core.v2.QueryR\x05query\x12&\n" +
	"\x0fuser_channel_id\x18\x02 \x01(\tR\ruserChannelId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12U\n" +
	"\x05state\x18\x04 \x01(\x0e2?.spaceone.api.notification.v1.UserChannelQuery.UserChannelStateR\x05state\x12!\n" +
	"\fis_subscribe\x18\x05 \x01(\bR\visSubscribe\x12!\n" +
	"\fis_scheduled\x18\x06 \x01(\bR\visScheduled\x12\x1f\n" +
	"\vprotocol_id\x18\x15 \x01(\tR\n" +
	"protocolId\x12$\n" +
	"\x0euser_secret_id\x18\x16 \x01(\tR\fuserSecretId\"7\n" +
	"\x10UserChannelState\x12\b\n" +
	"\x04NONE\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x02\"\x8d\x05\n" +
	"\x0fUserChannelInfo\x12&\n" +
	"\x0fuser_channel_id\x18\x01 \x01(\tR\ruserChannelId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12T\n" +
	"\x05state\x18\x03 \x01(\x0e2>.spaceone.api.notification.v1.UserChannelInfo.UserChannelStateR\x05state\x12+\n" +
	"\x04data\x18\x04 \x01(\v2\x17.google.protobuf.StructR\x04data\x12!\n" +
	"\fis_subscribe\x18\x05 \x01(\bR\visSubscribe\x12$\n" +
	"\rsubscriptions\x18\x06 \x03(\tR\rsubscriptions\x12!\n" +
	"\fis_scheduled\x18\a \x01(\bR\visScheduled\x12M\n" +
	"\bschedule\x18\b \x01(\v21.spaceone.api.notification.v1.UserChannelScheduleR\bschedule\x12+\n" +
	"\x04tags\x18\t \x01(\v2\x17.google.protobuf.StructR\x04tags\x12\x1b\n" +
	"\tdomain_id\x18\x15 \x01(\tR\bdomainId\x12\x17\n" +
	"\auser_id\x18\x16 \x01(\tR\x06userId\x12\x1f\n" +
	"\vprotocol_id\x18\x17 \x01(\tR\n" +
	"protocolId\x12$\n" +
	"\x0euser_secret_id\x18\x18 \x01(\tR\fuserSecretId\x12\x1d\n" +
	"\n" +
	"created_at\x18\x1f \x01(\tR\tcreatedAt\"7\n" +
	"\x10UserChannelState\x12\b\n" +
	"\x04NONE\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x02\"|\n" +
	"\x10UserChannelsInfo\x12G\n" +
	"\aresults\x18\x01 \x03(\v2-.spaceone.api.notification.v1.UserChannelInfoR\aresults\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\"S\n" +
	"\x14UserChannelStatQuery\x12;\n" +
	"\x05query\x18\x01 \x01(\v2%.spaceone.api.core.v2.StatisticsQueryR\x05query2\xc3\f\n" +
	"\vUserChannel\x12\xa0\x01\n" +
	"\x06create\x126.spaceone.api.notification.v1.CreateUserChannelRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\"/\x82\xd3\xe4\x93\x02):\x01*\"$/notification/v1/user-channel/create\x12\xa0\x01\n" +
	"\x06update\x126.spaceone.api.notification.v1.UpdateUserChannelRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\"/\x82\xd3\xe4\x93\x02):\x01*\"$/notification/v1/user-channel/update\x12\xb4\x01\n" +
	"\fset_schedule\x12>.spaceone.api.notification.v1.UpdateUserChannelScheduleRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\"5\x82\xd3\xe4\x93\x02/:\x01*\"*/notification/v1/user-channel/set-schedule\x12\xc0\x01\n" +
	"\x10set_subscription\x12B.spaceone.api.notification.v1.UpdateUserChannelSubscriptionRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\"9\x82\xd3\xe4\x93\x023:\x01*\"./notification/v1/user-channel/set-subscription\x12\x9a\x01\n" +
	"\x06enable\x120.spaceone.api.notification.v1.UserChannelRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\"/\x82\xd3\xe4\x93\x02):\x01*\"$/notification/v1/user-channel/enable\x12\x9c\x01\n" +
	"\adisable\x120.spaceone.api.notification.v1.UserChannelRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\"0\x82\xd3\xe4\x93\x02*:\x01*\"%/notification/v1/user-channel/disable\x12\x83\x01\n" +
	"\x06delete\x120.spaceone.api.notification.v1.UserChannelRequest\x1a\x16.google.protobuf.Empty\"/\x82\xd3\xe4\x93\x02):\x01*\"$/notification/v1/user-channel/delete\x12\x94\x01\n" +
	"\x03get\x120.spaceone.api.notification.v1.UserChannelRequest\x1a-.spaceone.api.notification.v1.UserChannelInfo\",\x82\xd3\xe4\x93\x02&:\x01*\"!/notification/v1/user-channel/get\x12\x95\x01\n" +
	"\x04list\x12..spaceone.api.notification.v1.UserChannelQuery\x1a..spaceone.api.notification.v1.UserChannelsInfo\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/notification/v1/user-channel/list\x12\x82\x01\n" +
	"\x04stat\x122.spaceone.api.notification.v1.UserChannelStatQuery\x1a\x17.google.protobuf.Struct\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/notification/v1/user-channel/statBCZAgithub.com/cloudforet-io/api/dist/go/spaceone/api/notification/v1b\x06proto3"

var (
	file_spaceone_api_notification_v1_user_channel_proto_rawDescOnce sync.Once
	file_spaceone_api_notification_v1_user_channel_proto_rawDescData []byte
)

func file_spaceone_api_notification_v1_user_channel_proto_rawDescGZIP() []byte {
	file_spaceone_api_notification_v1_user_channel_proto_rawDescOnce.Do(func() {
		file_spaceone_api_notification_v1_user_channel_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spaceone_api_notification_v1_user_channel_proto_rawDesc), len(file_spaceone_api_notification_v1_user_channel_proto_rawDesc)))
	})
	return file_spaceone_api_notification_v1_user_channel_proto_rawDescData
}

var file_spaceone_api_notification_v1_user_channel_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spaceone_api_notification_v1_user_channel_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_spaceone_api_notification_v1_user_channel_proto_goTypes = []any{
	(UserChannelSchedule_DayOfWeek)(0),           // 0: spaceone.api.notification.v1.UserChannelSchedule.DayOfWeek
	(UserChannelQuery_UserChannelState)(0),       // 1: spaceone.api.notification.v1.UserChannelQuery.UserChannelState
	(UserChannelInfo_UserChannelState)(0),        // 2: spaceone.api.notification.v1.UserChannelInfo.UserChannelState
	(*UserChannelSchedule)(nil),                  // 3: spaceone.api.notification.v1.UserChannelSchedule
	(*CreateUserChannelRequest)(nil),             // 4: spaceone.api.notification.v1.CreateUserChannelRequest
	(*UpdateUserChannelRequest)(nil),             // 5: spaceone.api.notification.v1.UpdateUserChannelRequest
	(*UpdateUserChannelScheduleRequest)(nil),     // 6: spaceone.api.notification.v1.UpdateUserChannelScheduleRequest
	(*UpdateUserChannelSubscriptionRequest)(nil), // 7: spaceone.api.notification.v1.UpdateUserChannelSubscriptionRequest
	(*UserChannelRequest)(nil),                   // 8: spaceone.api.notification.v1.UserChannelRequest
	(*UserChannelQuery)(nil),                     // 9: spaceone.api.notification.v1.UserChannelQuery
	(*UserChannelInfo)(nil),                      // 10: spaceone.api.notification.v1.UserChannelInfo
	(*UserChannelsInfo)(nil),                     // 11: spaceone.api.notification.v1.UserChannelsInfo
	(*UserChannelStatQuery)(nil),                 // 12: spaceone.api.notification.v1.UserChannelStatQuery
	(*_struct.Struct)(nil),                       // 13: google.protobuf.Struct
	(*v2.Query)(nil),                             // 14: spaceone.api.core.v2.Query
	(*v2.StatisticsQuery)(nil),                   // 15: spaceone.api.core.v2.StatisticsQuery
	(*empty.Empty)(nil),                          // 16: google.protobuf.Empty
}
var file_spaceone_api_notification_v1_user_channel_proto_depIdxs = []int32{
	0,  // 0: spaceone.api.notification.v1.UserChannelSchedule.day_of_week:type_name -> spaceone.api.notification.v1.UserChannelSchedule.DayOfWeek
	13, // 1: spaceone.api.notification.v1.CreateUserChannelRequest.data:type_name -> google.protobuf.Struct
	3,  // 2: spaceone.api.notification.v1.CreateUserChannelRequest.schedule:type_name -> spaceone.api.notification.v1.UserChannelSchedule
	13, // 3: spaceone.api.notification.v1.CreateUserChannelRequest.tags:type_name -> google.protobuf.Struct
	13, // 4: spaceone.api.notification.v1.UpdateUserChannelRequest.data:type_name -> google.protobuf.Struct
	3,  // 5: spaceone.api.notification.v1.UpdateUserChannelRequest.schedule:type_name -> spaceone.api.notification.v1.UserChannelSchedule
	13, // 6: spaceone.api.notification.v1.UpdateUserChannelRequest.tags:type_name -> google.protobuf.Struct
	3,  // 7: spaceone.api.notification.v1.UpdateUserChannelScheduleRequest.schedule:type_name -> spaceone.api.notification.v1.UserChannelSchedule
	14, // 8: spaceone.api.notification.v1.UserChannelQuery.query:type_name -> spaceone.api.core.v2.Query
	1,  // 9: spaceone.api.notification.v1.UserChannelQuery.state:type_name -> spaceone.api.notification.v1.UserChannelQuery.UserChannelState
	2,  // 10: spaceone.api.notification.v1.UserChannelInfo.state:type_name -> spaceone.api.notification.v1.UserChannelInfo.UserChannelState
	13, // 11: spaceone.api.notification.v1.UserChannelInfo.data:type_name -> google.protobuf.Struct
	3,  // 12: spaceone.api.notification.v1.UserChannelInfo.schedule:type_name -> spaceone.api.notification.v1.UserChannelSchedule
	13, // 13: spaceone.api.notification.v1.UserChannelInfo.tags:type_name -> google.protobuf.Struct
	10, // 14: spaceone.api.notification.v1.UserChannelsInfo.results:type_name -> spaceone.api.notification.v1.UserChannelInfo
	15, // 15: spaceone.api.notification.v1.UserChannelStatQuery.query:type_name -> spaceone.api.core.v2.StatisticsQuery
	4,  // 16: spaceone.api.notification.v1.UserChannel.create:input_type -> spaceone.api.notification.v1.CreateUserChannelRequest
	5,  // 17: spaceone.api.notification.v1.UserChannel.update:input_type -> spaceone.api.notification.v1.UpdateUserChannelRequest
	6,  // 18: spaceone.api.notification.v1.UserChannel.set_schedule:input_type -> spaceone.api.notification.v1.UpdateUserChannelScheduleRequest
	7,  // 19: spaceone.api.notification.v1.UserChannel.set_subscription:input_type -> spaceone.api.notification.v1.UpdateUserChannelSubscriptionRequest
	8,  // 20: spaceone.api.notification.v1.UserChannel.enable:input_type -> spaceone.api.notification.v1.UserChannelRequest
	8,  // 21: spaceone.api.notification.v1.UserChannel.disable:input_type -> spaceone.api.notification.v1.UserChannelRequest
	8,  // 22: spaceone.api.notification.v1.UserChannel.delete:input_type -> spaceone.api.notification.v1.UserChannelRequest
	8,  // 23: spaceone.api.notification.v1.UserChannel.get:input_type -> spaceone.api.notification.v1.UserChannelRequest
	9,  // 24: spaceone.api.notification.v1.UserChannel.list:input_type -> spaceone.api.notification.v1.UserChannelQuery
	12, // 25: spaceone.api.notification.v1.UserChannel.stat:input_type -> spaceone.api.notification.v1.UserChannelStatQuery
	10, // 26: spaceone.api.notification.v1.UserChannel.create:output_type -> spaceone.api.notification.v1.UserChannelInfo
	10, // 27: spaceone.api.notification.v1.UserChannel.update:output_type -> spaceone.api.notification.v1.UserChannelInfo
	10, // 28: spaceone.api.notification.v1.UserChannel.set_schedule:output_type -> spaceone.api.notification.v1.UserChannelInfo
	10, // 29: spaceone.api.notification.v1.UserChannel.set_subscription:output_type -> spaceone.api.notification.v1.UserChannelInfo
	10, // 30: spaceone.api.notification.v1.UserChannel.enable:output_type -> spaceone.api.notification.v1.UserChannelInfo
	10, // 31: spaceone.api.notification.v1.UserChannel.disable:output_type -> spaceone.api.notification.v1.UserChannelInfo
	16, // 32: spaceone.api.notification.v1.UserChannel.delete:output_type -> google.protobuf.Empty
	10, // 33: spaceone.api.notification.v1.UserChannel.get:output_type -> spaceone.api.notification.v1.UserChannelInfo
	11, // 34: spaceone.api.notification.v1.UserChannel.list:output_type -> spaceone.api.notification.v1.UserChannelsInfo
	13, // 35: spaceone.api.notification.v1.UserChannel.stat:output_type -> google.protobuf.Struct
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_spaceone_api_notification_v1_user_channel_proto_init() }
func file_spaceone_api_notification_v1_user_channel_proto_init() {
	if File_spaceone_api_notification_v1_user_channel_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spaceone_api_notification_v1_user_channel_proto_rawDesc), len(file_spaceone_api_notification_v1_user_channel_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spaceone_api_notification_v1_user_channel_proto_goTypes,
		DependencyIndexes: file_spaceone_api_notification_v1_user_channel_proto_depIdxs,
		EnumInfos:         file_spaceone_api_notification_v1_user_channel_proto_enumTypes,
		MessageInfos:      file_spaceone_api_notification_v1_user_channel_proto_msgTypes,
	}.Build()
	File_spaceone_api_notification_v1_user_channel_proto = out.File
	file_spaceone_api_notification_v1_user_channel_proto_goTypes = nil
	file_spaceone_api_notification_v1_user_channel_proto_depIdxs = nil
}
