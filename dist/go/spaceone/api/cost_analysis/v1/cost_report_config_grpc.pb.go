// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/cost_analysis/v1/cost_report_config.proto

package v1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CostReportConfig_GenerateReport_FullMethodName   = "/spaceone.api.cost_analysis.v1.CostReportConfig/generate_report"
	CostReportConfig_Create_FullMethodName           = "/spaceone.api.cost_analysis.v1.CostReportConfig/create"
	CostReportConfig_Update_FullMethodName           = "/spaceone.api.cost_analysis.v1.CostReportConfig/update"
	CostReportConfig_UpdateRecipients_FullMethodName = "/spaceone.api.cost_analysis.v1.CostReportConfig/update_recipients"
	CostReportConfig_Enable_FullMethodName           = "/spaceone.api.cost_analysis.v1.CostReportConfig/enable"
	CostReportConfig_Disable_FullMethodName          = "/spaceone.api.cost_analysis.v1.CostReportConfig/disable"
	CostReportConfig_Delete_FullMethodName           = "/spaceone.api.cost_analysis.v1.CostReportConfig/delete"
	CostReportConfig_Run_FullMethodName              = "/spaceone.api.cost_analysis.v1.CostReportConfig/run"
	CostReportConfig_Get_FullMethodName              = "/spaceone.api.cost_analysis.v1.CostReportConfig/get"
	CostReportConfig_List_FullMethodName             = "/spaceone.api.cost_analysis.v1.CostReportConfig/list"
	CostReportConfig_Stat_FullMethodName             = "/spaceone.api.cost_analysis.v1.CostReportConfig/stat"
)

// CostReportConfigClient is the client API for CostReportConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CostReportConfigClient interface {
	GenerateReport(ctx context.Context, in *GenerateReportCostReportConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Create(ctx context.Context, in *CreateCostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error)
	Update(ctx context.Context, in *UpdateCostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error)
	UpdateRecipients(ctx context.Context, in *UpdateCostReportConfigRecipientsRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error)
	Enable(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error)
	Disable(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error)
	Delete(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Run(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Get(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error)
	List(ctx context.Context, in *CostReportConfigQuery, opts ...grpc.CallOption) (*CostReportConfigsInfo, error)
	Stat(ctx context.Context, in *CostReportConfigStatQuery, opts ...grpc.CallOption) (*CostReportConfigsInfo, error)
}

type costReportConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewCostReportConfigClient(cc grpc.ClientConnInterface) CostReportConfigClient {
	return &costReportConfigClient{cc}
}

func (c *costReportConfigClient) GenerateReport(ctx context.Context, in *GenerateReportCostReportConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CostReportConfig_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Create(ctx context.Context, in *CreateCostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Update(ctx context.Context, in *UpdateCostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) UpdateRecipients(ctx context.Context, in *UpdateCostReportConfigRecipientsRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_UpdateRecipients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Enable(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_Enable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Disable(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Delete(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CostReportConfig_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Run(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, CostReportConfig_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Get(ctx context.Context, in *CostReportConfigRequest, opts ...grpc.CallOption) (*CostReportConfigInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) List(ctx context.Context, in *CostReportConfigQuery, opts ...grpc.CallOption) (*CostReportConfigsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigsInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *costReportConfigClient) Stat(ctx context.Context, in *CostReportConfigStatQuery, opts ...grpc.CallOption) (*CostReportConfigsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CostReportConfigsInfo)
	err := c.cc.Invoke(ctx, CostReportConfig_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CostReportConfigServer is the server API for CostReportConfig service.
// All implementations must embed UnimplementedCostReportConfigServer
// for forward compatibility.
type CostReportConfigServer interface {
	GenerateReport(context.Context, *GenerateReportCostReportConfigRequest) (*empty.Empty, error)
	Create(context.Context, *CreateCostReportConfigRequest) (*CostReportConfigInfo, error)
	Update(context.Context, *UpdateCostReportConfigRequest) (*CostReportConfigInfo, error)
	UpdateRecipients(context.Context, *UpdateCostReportConfigRecipientsRequest) (*CostReportConfigInfo, error)
	Enable(context.Context, *CostReportConfigRequest) (*CostReportConfigInfo, error)
	Disable(context.Context, *CostReportConfigRequest) (*CostReportConfigInfo, error)
	Delete(context.Context, *CostReportConfigRequest) (*empty.Empty, error)
	Run(context.Context, *CostReportConfigRequest) (*empty.Empty, error)
	Get(context.Context, *CostReportConfigRequest) (*CostReportConfigInfo, error)
	List(context.Context, *CostReportConfigQuery) (*CostReportConfigsInfo, error)
	Stat(context.Context, *CostReportConfigStatQuery) (*CostReportConfigsInfo, error)
	mustEmbedUnimplementedCostReportConfigServer()
}

// UnimplementedCostReportConfigServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCostReportConfigServer struct{}

func (UnimplementedCostReportConfigServer) GenerateReport(context.Context, *GenerateReportCostReportConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedCostReportConfigServer) Create(context.Context, *CreateCostReportConfigRequest) (*CostReportConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCostReportConfigServer) Update(context.Context, *UpdateCostReportConfigRequest) (*CostReportConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCostReportConfigServer) UpdateRecipients(context.Context, *UpdateCostReportConfigRecipientsRequest) (*CostReportConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipients not implemented")
}
func (UnimplementedCostReportConfigServer) Enable(context.Context, *CostReportConfigRequest) (*CostReportConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedCostReportConfigServer) Disable(context.Context, *CostReportConfigRequest) (*CostReportConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedCostReportConfigServer) Delete(context.Context, *CostReportConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCostReportConfigServer) Run(context.Context, *CostReportConfigRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedCostReportConfigServer) Get(context.Context, *CostReportConfigRequest) (*CostReportConfigInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCostReportConfigServer) List(context.Context, *CostReportConfigQuery) (*CostReportConfigsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCostReportConfigServer) Stat(context.Context, *CostReportConfigStatQuery) (*CostReportConfigsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCostReportConfigServer) mustEmbedUnimplementedCostReportConfigServer() {}
func (UnimplementedCostReportConfigServer) testEmbeddedByValue()                          {}

// UnsafeCostReportConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CostReportConfigServer will
// result in compilation errors.
type UnsafeCostReportConfigServer interface {
	mustEmbedUnimplementedCostReportConfigServer()
}

func RegisterCostReportConfigServer(s grpc.ServiceRegistrar, srv CostReportConfigServer) {
	// If the following call pancis, it indicates UnimplementedCostReportConfigServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CostReportConfig_ServiceDesc, srv)
}

func _CostReportConfig_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportCostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).GenerateReport(ctx, req.(*GenerateReportCostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Create(ctx, req.(*CreateCostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Update(ctx, req.(*UpdateCostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_UpdateRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCostReportConfigRecipientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).UpdateRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_UpdateRecipients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).UpdateRecipients(ctx, req.(*UpdateCostReportConfigRecipientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Enable(ctx, req.(*CostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Disable(ctx, req.(*CostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Delete(ctx, req.(*CostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Run(ctx, req.(*CostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Get(ctx, req.(*CostReportConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).List(ctx, req.(*CostReportConfigQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CostReportConfig_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CostReportConfigStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CostReportConfigServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CostReportConfig_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CostReportConfigServer).Stat(ctx, req.(*CostReportConfigStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CostReportConfig_ServiceDesc is the grpc.ServiceDesc for CostReportConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CostReportConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.cost_analysis.v1.CostReportConfig",
	HandlerType: (*CostReportConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "generate_report",
			Handler:    _CostReportConfig_GenerateReport_Handler,
		},
		{
			MethodName: "create",
			Handler:    _CostReportConfig_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _CostReportConfig_Update_Handler,
		},
		{
			MethodName: "update_recipients",
			Handler:    _CostReportConfig_UpdateRecipients_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _CostReportConfig_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _CostReportConfig_Disable_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _CostReportConfig_Delete_Handler,
		},
		{
			MethodName: "run",
			Handler:    _CostReportConfig_Run_Handler,
		},
		{
			MethodName: "get",
			Handler:    _CostReportConfig_Get_Handler,
		},
		{
			MethodName: "list",
			Handler:    _CostReportConfig_List_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _CostReportConfig_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/cost_analysis/v1/cost_report_config.proto",
}
