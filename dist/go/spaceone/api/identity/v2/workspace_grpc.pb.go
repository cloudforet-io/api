// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.6.1
// source: spaceone/api/identity/v2/workspace.proto

package v2

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Workspace_Create_FullMethodName               = "/spaceone.api.identity.v2.Workspace/create"
	Workspace_Update_FullMethodName               = "/spaceone.api.identity.v2.Workspace/update"
	Workspace_ChangeWorkspaceGroup_FullMethodName = "/spaceone.api.identity.v2.Workspace/change_workspace_group"
	Workspace_Delete_FullMethodName               = "/spaceone.api.identity.v2.Workspace/delete"
	Workspace_Enable_FullMethodName               = "/spaceone.api.identity.v2.Workspace/enable"
	Workspace_Disable_FullMethodName              = "/spaceone.api.identity.v2.Workspace/disable"
	Workspace_AddPackage_FullMethodName           = "/spaceone.api.identity.v2.Workspace/add_package"
	Workspace_RemovePackage_FullMethodName        = "/spaceone.api.identity.v2.Workspace/remove_package"
	Workspace_Get_FullMethodName                  = "/spaceone.api.identity.v2.Workspace/get"
	Workspace_Check_FullMethodName                = "/spaceone.api.identity.v2.Workspace/check"
	Workspace_List_FullMethodName                 = "/spaceone.api.identity.v2.Workspace/list"
	Workspace_Analyze_FullMethodName              = "/spaceone.api.identity.v2.Workspace/analyze"
	Workspace_Stat_FullMethodName                 = "/spaceone.api.identity.v2.Workspace/stat"
)

// WorkspaceClient is the client API for Workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceClient interface {
	Create(ctx context.Context, in *CreateWorkSpaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	Update(ctx context.Context, in *UpdateWorkSpaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	ChangeWorkspaceGroup(ctx context.Context, in *ChangeWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	Delete(ctx context.Context, in *WorkspaceDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Enable(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	Disable(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	AddPackage(ctx context.Context, in *WorkspacePackageRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	RemovePackage(ctx context.Context, in *WorkspacePackageRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	Get(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error)
	Check(ctx context.Context, in *WorkspaceCheckRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	List(ctx context.Context, in *WorkspaceSearchQuery, opts ...grpc.CallOption) (*WorkspacesInfo, error)
	Analyze(ctx context.Context, in *WorkspaceAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
	Stat(ctx context.Context, in *WorkspaceStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error)
}

type workspaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceClient(cc grpc.ClientConnInterface) WorkspaceClient {
	return &workspaceClient{cc}
}

func (c *workspaceClient) Create(ctx context.Context, in *CreateWorkSpaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Update(ctx context.Context, in *UpdateWorkSpaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) ChangeWorkspaceGroup(ctx context.Context, in *ChangeWorkspaceGroupRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_ChangeWorkspaceGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Delete(ctx context.Context, in *WorkspaceDeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Workspace_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Enable(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_Enable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Disable(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_Disable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) AddPackage(ctx context.Context, in *WorkspacePackageRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_AddPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) RemovePackage(ctx context.Context, in *WorkspacePackageRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_RemovePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Get(ctx context.Context, in *WorkspaceRequest, opts ...grpc.CallOption) (*WorkspaceInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspaceInfo)
	err := c.cc.Invoke(ctx, Workspace_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Check(ctx context.Context, in *WorkspaceCheckRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Workspace_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) List(ctx context.Context, in *WorkspaceSearchQuery, opts ...grpc.CallOption) (*WorkspacesInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkspacesInfo)
	err := c.cc.Invoke(ctx, Workspace_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Analyze(ctx context.Context, in *WorkspaceAnalyzeQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Workspace_Analyze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Stat(ctx context.Context, in *WorkspaceStatQuery, opts ...grpc.CallOption) (*_struct.Struct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(_struct.Struct)
	err := c.cc.Invoke(ctx, Workspace_Stat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServer is the server API for Workspace service.
// All implementations must embed UnimplementedWorkspaceServer
// for forward compatibility.
type WorkspaceServer interface {
	Create(context.Context, *CreateWorkSpaceRequest) (*WorkspaceInfo, error)
	Update(context.Context, *UpdateWorkSpaceRequest) (*WorkspaceInfo, error)
	ChangeWorkspaceGroup(context.Context, *ChangeWorkspaceGroupRequest) (*WorkspaceInfo, error)
	Delete(context.Context, *WorkspaceDeleteRequest) (*empty.Empty, error)
	Enable(context.Context, *WorkspaceRequest) (*WorkspaceInfo, error)
	Disable(context.Context, *WorkspaceRequest) (*WorkspaceInfo, error)
	AddPackage(context.Context, *WorkspacePackageRequest) (*WorkspaceInfo, error)
	RemovePackage(context.Context, *WorkspacePackageRequest) (*WorkspaceInfo, error)
	Get(context.Context, *WorkspaceRequest) (*WorkspaceInfo, error)
	Check(context.Context, *WorkspaceCheckRequest) (*empty.Empty, error)
	List(context.Context, *WorkspaceSearchQuery) (*WorkspacesInfo, error)
	Analyze(context.Context, *WorkspaceAnalyzeQuery) (*_struct.Struct, error)
	Stat(context.Context, *WorkspaceStatQuery) (*_struct.Struct, error)
	mustEmbedUnimplementedWorkspaceServer()
}

// UnimplementedWorkspaceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkspaceServer struct{}

func (UnimplementedWorkspaceServer) Create(context.Context, *CreateWorkSpaceRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkspaceServer) Update(context.Context, *UpdateWorkSpaceRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWorkspaceServer) ChangeWorkspaceGroup(context.Context, *ChangeWorkspaceGroupRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeWorkspaceGroup not implemented")
}
func (UnimplementedWorkspaceServer) Delete(context.Context, *WorkspaceDeleteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWorkspaceServer) Enable(context.Context, *WorkspaceRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedWorkspaceServer) Disable(context.Context, *WorkspaceRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedWorkspaceServer) AddPackage(context.Context, *WorkspacePackageRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPackage not implemented")
}
func (UnimplementedWorkspaceServer) RemovePackage(context.Context, *WorkspacePackageRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackage not implemented")
}
func (UnimplementedWorkspaceServer) Get(context.Context, *WorkspaceRequest) (*WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWorkspaceServer) Check(context.Context, *WorkspaceCheckRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedWorkspaceServer) List(context.Context, *WorkspaceSearchQuery) (*WorkspacesInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceServer) Analyze(context.Context, *WorkspaceAnalyzeQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedWorkspaceServer) Stat(context.Context, *WorkspaceStatQuery) (*_struct.Struct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedWorkspaceServer) mustEmbedUnimplementedWorkspaceServer() {}
func (UnimplementedWorkspaceServer) testEmbeddedByValue()                   {}

// UnsafeWorkspaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServer will
// result in compilation errors.
type UnsafeWorkspaceServer interface {
	mustEmbedUnimplementedWorkspaceServer()
}

func RegisterWorkspaceServer(s grpc.ServiceRegistrar, srv WorkspaceServer) {
	// If the following call pancis, it indicates UnimplementedWorkspaceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Workspace_ServiceDesc, srv)
}

func _Workspace_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Create(ctx, req.(*CreateWorkSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Update(ctx, req.(*UpdateWorkSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_ChangeWorkspaceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeWorkspaceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).ChangeWorkspaceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_ChangeWorkspaceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).ChangeWorkspaceGroup(ctx, req.(*ChangeWorkspaceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Delete(ctx, req.(*WorkspaceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Enable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Enable(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Disable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Disable(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_AddPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspacePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).AddPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_AddPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).AddPackage(ctx, req.(*WorkspacePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspacePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_RemovePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).RemovePackage(ctx, req.(*WorkspacePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Get(ctx, req.(*WorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Check(ctx, req.(*WorkspaceCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).List(ctx, req.(*WorkspaceSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Analyze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceAnalyzeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Analyze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Analyze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Analyze(ctx, req.(*WorkspaceAnalyzeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceStatQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Stat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Stat(ctx, req.(*WorkspaceStatQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Workspace_ServiceDesc is the grpc.ServiceDesc for Workspace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workspace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spaceone.api.identity.v2.Workspace",
	HandlerType: (*WorkspaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _Workspace_Create_Handler,
		},
		{
			MethodName: "update",
			Handler:    _Workspace_Update_Handler,
		},
		{
			MethodName: "change_workspace_group",
			Handler:    _Workspace_ChangeWorkspaceGroup_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _Workspace_Delete_Handler,
		},
		{
			MethodName: "enable",
			Handler:    _Workspace_Enable_Handler,
		},
		{
			MethodName: "disable",
			Handler:    _Workspace_Disable_Handler,
		},
		{
			MethodName: "add_package",
			Handler:    _Workspace_AddPackage_Handler,
		},
		{
			MethodName: "remove_package",
			Handler:    _Workspace_RemovePackage_Handler,
		},
		{
			MethodName: "get",
			Handler:    _Workspace_Get_Handler,
		},
		{
			MethodName: "check",
			Handler:    _Workspace_Check_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Workspace_List_Handler,
		},
		{
			MethodName: "analyze",
			Handler:    _Workspace_Analyze_Handler,
		},
		{
			MethodName: "stat",
			Handler:    _Workspace_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spaceone/api/identity/v2/workspace.proto",
}
